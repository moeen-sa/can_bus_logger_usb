
can_analyzer_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce8  08007ce8  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce8  08007ce8  00008ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007cf0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090fc  2**0
                  CONTENTS
 10 .bss          00001cc0  200000fc  200000fc  000090fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dbc  20001dbc  000090fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f621  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dc2  00000000  00000000  0001874d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0001b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000967  00000000  00000000  0001c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cda  00000000  00000000  0001cb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a7e  00000000  00000000  0003f809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c690e  00000000  00000000  00050287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116b95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033fc  00000000  00000000  00116bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00119fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c54 	.word	0x08007c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007c54 	.word	0x08007c54

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fabf 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8c3 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f963 	bl	80007a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004da:	f000 f929 	bl	8000730 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 fdff 	bl	80070e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  memset(can_rx_data , 0 , 8);
 80004e2:	2208      	movs	r2, #8
 80004e4:	2100      	movs	r1, #0
 80004e6:	4853      	ldr	r0, [pc, #332]	@ (8000634 <main+0x16c>)
 80004e8:	f007 fb70 	bl	8007bcc <memset>
  //********************************can filter
  filter.FilterActivation = CAN_FILTER_ENABLE;
 80004ec:	4b52      	ldr	r3, [pc, #328]	@ (8000638 <main+0x170>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	621a      	str	r2, [r3, #32]
  filter.FilterBank = 0;
 80004f2:	4b51      	ldr	r3, [pc, #324]	@ (8000638 <main+0x170>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004f8:	4b4f      	ldr	r3, [pc, #316]	@ (8000638 <main+0x170>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  filter.FilterIdHigh = 0;
 80004fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000638 <main+0x170>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 8000504:	4b4c      	ldr	r3, [pc, #304]	@ (8000638 <main+0x170>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 800050a:	4b4b      	ldr	r3, [pc, #300]	@ (8000638 <main+0x170>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 8000510:	4b49      	ldr	r3, [pc, #292]	@ (8000638 <main+0x170>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000516:	4b48      	ldr	r3, [pc, #288]	@ (8000638 <main+0x170>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800051c:	4b46      	ldr	r3, [pc, #280]	@ (8000638 <main+0x170>)
 800051e:	2201      	movs	r2, #1
 8000520:	61da      	str	r2, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan1, &filter);
 8000522:	4945      	ldr	r1, [pc, #276]	@ (8000638 <main+0x170>)
 8000524:	4845      	ldr	r0, [pc, #276]	@ (800063c <main+0x174>)
 8000526:	f000 fc25 	bl	8000d74 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800052a:	2102      	movs	r1, #2
 800052c:	4843      	ldr	r0, [pc, #268]	@ (800063c <main+0x174>)
 800052e:	f000 ff37 	bl	80013a0 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan1);
 8000532:	4842      	ldr	r0, [pc, #264]	@ (800063c <main+0x174>)
 8000534:	f000 fcfe 	bl	8000f34 <HAL_CAN_Start>
  //******************************************************************can tx message
  tx_can_msg.DLC = 8;
 8000538:	4b41      	ldr	r3, [pc, #260]	@ (8000640 <main+0x178>)
 800053a:	2208      	movs	r2, #8
 800053c:	611a      	str	r2, [r3, #16]
  tx_can_msg.ExtId = 0X18FECAEE;
 800053e:	4b40      	ldr	r3, [pc, #256]	@ (8000640 <main+0x178>)
 8000540:	4a40      	ldr	r2, [pc, #256]	@ (8000644 <main+0x17c>)
 8000542:	605a      	str	r2, [r3, #4]
  tx_can_msg.IDE = CAN_ID_EXT;
 8000544:	4b3e      	ldr	r3, [pc, #248]	@ (8000640 <main+0x178>)
 8000546:	2204      	movs	r2, #4
 8000548:	609a      	str	r2, [r3, #8]
  uint32_t tx_mail_box = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  uint8_t can_send_data[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 800054e:	4a3e      	ldr	r2, [pc, #248]	@ (8000648 <main+0x180>)
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_CAN_AddTxMessage(&hcan1, &tx_can_msg, can_send_data , &tx_mail_box);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	f107 0210 	add.w	r2, r7, #16
 8000564:	4936      	ldr	r1, [pc, #216]	@ (8000640 <main+0x178>)
 8000566:	4835      	ldr	r0, [pc, #212]	@ (800063c <main+0x174>)
 8000568:	f000 fd28 	bl	8000fbc <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 800056c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000570:	f000 fae0 	bl	8000b34 <HAL_Delay>

	  memset(cdc_data_to_send , 0 , 48);
 8000574:	2230      	movs	r2, #48	@ 0x30
 8000576:	2100      	movs	r1, #0
 8000578:	4834      	ldr	r0, [pc, #208]	@ (800064c <main+0x184>)
 800057a:	f007 fb27 	bl	8007bcc <memset>
	  char temp_cdc_send_data[10];
	  //add header to packet
       itoa(rx_can_msg.ExtId , temp_cdc_send_data , 16);
 800057e:	4b34      	ldr	r3, [pc, #208]	@ (8000650 <main+0x188>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2210      	movs	r2, #16
 8000588:	4619      	mov	r1, r3
 800058a:	f007 fadb 	bl	8007b44 <itoa>
       strcpy(cdc_data_to_send , temp_cdc_send_data);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	482e      	ldr	r0, [pc, #184]	@ (800064c <main+0x184>)
 8000594:	f007 fb56 	bl	8007c44 <strcpy>
       strcat(cdc_data_to_send , ","); //add seprator
 8000598:	482c      	ldr	r0, [pc, #176]	@ (800064c <main+0x184>)
 800059a:	f7ff fe15 	bl	80001c8 <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b2a      	ldr	r3, [pc, #168]	@ (800064c <main+0x184>)
 80005a4:	4413      	add	r3, r2
 80005a6:	492b      	ldr	r1, [pc, #172]	@ (8000654 <main+0x18c>)
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	8013      	strh	r3, [r2, #0]

	  for(int i=0; i<8; i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	e02d      	b.n	8000612 <main+0x14a>
		  itoa(can_rx_data[i] , temp_cdc_send_data , 16);
 80005b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000634 <main+0x16c>)
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2210      	movs	r2, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	f007 fabd 	bl	8007b44 <itoa>
		  strcat(cdc_data_to_send , temp_cdc_send_data);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	481f      	ldr	r0, [pc, #124]	@ (800064c <main+0x184>)
 80005d0:	f007 fb04 	bl	8007bdc <strcat>
		  if(i==7)
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	d10c      	bne.n	80005f4 <main+0x12c>
		  strcat(cdc_data_to_send , "\n"); //add to the last char
 80005da:	481c      	ldr	r0, [pc, #112]	@ (800064c <main+0x184>)
 80005dc:	f7ff fdf4 	bl	80001c8 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <main+0x184>)
 80005e6:	4413      	add	r3, r2
 80005e8:	491b      	ldr	r1, [pc, #108]	@ (8000658 <main+0x190>)
 80005ea:	461a      	mov	r2, r3
 80005ec:	460b      	mov	r3, r1
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	8013      	strh	r3, [r2, #0]
 80005f2:	e00b      	b.n	800060c <main+0x144>
		  else
			  strcat(cdc_data_to_send , ",");  //add between data
 80005f4:	4815      	ldr	r0, [pc, #84]	@ (800064c <main+0x184>)
 80005f6:	f7ff fde7 	bl	80001c8 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <main+0x184>)
 8000600:	4413      	add	r3, r2
 8000602:	4914      	ldr	r1, [pc, #80]	@ (8000654 <main+0x18c>)
 8000604:	461a      	mov	r2, r3
 8000606:	460b      	mov	r3, r1
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	8013      	strh	r3, [r2, #0]
	  for(int i=0; i<8; i++){
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	3301      	adds	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	2b07      	cmp	r3, #7
 8000616:	ddce      	ble.n	80005b6 <main+0xee>

		//  sprintf(cdc_data_to_send , "%8X" , can_rx_data[i]);
	  }
	  CDC_Transmit_FS((uint8_t *)cdc_data_to_send , strlen(cdc_data_to_send));
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <main+0x184>)
 800061a:	f7ff fdd5 	bl	80001c8 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	4619      	mov	r1, r3
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <main+0x184>)
 8000624:	f006 fe1a 	bl	800725c <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000628:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800062c:	f000 fa82 	bl	8000b34 <HAL_Delay>
  {
 8000630:	e794      	b.n	800055c <main+0x94>
 8000632:	bf00      	nop
 8000634:	2000019c 	.word	0x2000019c
 8000638:	20000118 	.word	0x20000118
 800063c:	20000174 	.word	0x20000174
 8000640:	2000015c 	.word	0x2000015c
 8000644:	18fecaee 	.word	0x18fecaee
 8000648:	08007c74 	.word	0x08007c74
 800064c:	200001a4 	.word	0x200001a4
 8000650:	20000140 	.word	0x20000140
 8000654:	08007c6c 	.word	0x08007c6c
 8000658:	08007c70 	.word	0x08007c70

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 faae 	bl	8007bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006cc:	230f      	movs	r3, #15
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006d0:	2390      	movs	r3, #144	@ 0x90
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006d8:	2305      	movs	r3, #5
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fdb3 	bl	800324c <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f8a0 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f003 f814 	bl	800373c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f889 	bl	8000830 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_CAN1_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_CAN1_Init+0x68>)
 800073c:	220c      	movs	r2, #12
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000746:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_CAN1_Init+0x68>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000750:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000754:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000758:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800075c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_CAN1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_CAN1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000784:	f000 f9fa 	bl	8000b7c <HAL_CAN_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800078e:	f000 f84f 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000174 	.word	0x20000174
 800079c:	40006400 	.word	0x40006400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x68>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	 HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_can_msg, can_rx_data);
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000818:	2100      	movs	r1, #0
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 fc9e 	bl	800115c <HAL_CAN_GetRxMessage>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000019c 	.word	0x2000019c
 800082c:	20000140 	.word	0x20000140

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <HAL_CAN_MspInit+0xa4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d13b      	bne.n	8000926 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <HAL_CAN_MspInit+0xa8>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <HAL_CAN_MspInit+0xa8>)
 80008b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <HAL_CAN_MspInit+0xa8>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <HAL_CAN_MspInit+0xa8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <HAL_CAN_MspInit+0xa8>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_CAN_MspInit+0xa8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e6:	2303      	movs	r3, #3
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008f6:	2309      	movs	r3, #9
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <HAL_CAN_MspInit+0xac>)
 8000902:	f001 f8b5 	bl	8001a70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2014      	movs	r0, #20
 800090c:	f001 f879 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000910:	2014      	movs	r0, #20
 8000912:	f001 f892 	bl	8001a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2015      	movs	r0, #21
 800091c:	f001 f871 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000920:	2015      	movs	r0, #21
 8000922:	f001 f88a 	bl	8001a3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40006400 	.word	0x40006400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020c00 	.word	0x40020c00

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f8af 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <CAN1_RX0_IRQHandler+0x10>)
 80009a2:	f000 fd23 	bl	80013ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000174 	.word	0x20000174

080009b0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <CAN1_RX1_IRQHandler+0x10>)
 80009b6:	f000 fd19 	bl	80013ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000174 	.word	0x20000174

080009c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <OTG_FS_IRQHandler+0x10>)
 80009ca:	f001 fb31 	bl	8002030 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200016b8 	.word	0x200016b8

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a00:	f7ff ffea 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f007 f8e7 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fd4b 	bl	80004c8 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a40:	08007cf0 	.word	0x08007cf0
  ldr r2, =_sbss
 8000a44:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a48:	20001dbc 	.word	0x20001dbc

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 ffb7 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff feda 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ffcf 	bl	8001a56 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 ff97 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	@ (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	200001d4 	.word	0x200001d4

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200001d4 	.word	0x200001d4

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffde 	bl	8000b1c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0ed      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fe76 	bl	800088c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb0:	f7ff ffb4 	bl	8000b1c <HAL_GetTick>
 8000bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bb6:	e012      	b.n	8000bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bb8:	f7ff ffb0 	bl	8000b1c <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d90b      	bls.n	8000bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e0c5      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0e5      	beq.n	8000bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0202 	bic.w	r2, r2, #2
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfc:	f7ff ff8e 	bl	8000b1c <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c02:	e012      	b.n	8000c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c04:	f7ff ff8a 	bl	8000b1c <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d90b      	bls.n	8000c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2205      	movs	r2, #5
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e09f      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e5      	bne.n	8000c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7e1b      	ldrb	r3, [r3, #24]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d108      	bne.n	8000c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7e5b      	ldrb	r3, [r3, #25]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d108      	bne.n	8000c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d108      	bne.n	8000ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0220 	orr.w	r2, r2, #32
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0220 	bic.w	r2, r2, #32
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7edb      	ldrb	r3, [r3, #27]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d108      	bne.n	8000cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0210 	bic.w	r2, r2, #16
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0210 	orr.w	r2, r2, #16
 8000cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7f1b      	ldrb	r3, [r3, #28]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d108      	bne.n	8000cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0208 	orr.w	r2, r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0208 	bic.w	r2, r2, #8
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7f5b      	ldrb	r3, [r3, #29]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d108      	bne.n	8000d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f042 0204 	orr.w	r2, r2, #4
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0204 	bic.w	r2, r2, #4
 8000d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	ea42 0103 	orr.w	r1, r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d8c:	7cfb      	ldrb	r3, [r7, #19]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d003      	beq.n	8000d9a <HAL_CAN_ConfigFilter+0x26>
 8000d92:	7cfb      	ldrb	r3, [r7, #19]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	f040 80be 	bne.w	8000f16 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000d9a:	4b65      	ldr	r3, [pc, #404]	@ (8000f30 <HAL_CAN_ConfigFilter+0x1bc>)
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000db4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	2201      	movs	r2, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	401a      	ands	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d123      	bne.n	8000e44 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3248      	adds	r2, #72	@ 0x48
 8000e24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e3a:	6979      	ldr	r1, [r7, #20]
 8000e3c:	3348      	adds	r3, #72	@ 0x48
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d122      	bne.n	8000e92 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3248      	adds	r2, #72	@ 0x48
 8000e72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e88:	6979      	ldr	r1, [r7, #20]
 8000e8a:	3348      	adds	r3, #72	@ 0x48
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	440b      	add	r3, r1
 8000e90:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000eac:	e007      	b.n	8000ebe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000ed8:	e007      	b.n	8000eea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d107      	bne.n	8000f02 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f08:	f023 0201 	bic.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e006      	b.n	8000f24 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
  }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40006400 	.word	0x40006400

08000f34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d12e      	bne.n	8000fa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f60:	f7ff fddc 	bl	8000b1c <HAL_GetTick>
 8000f64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f66:	e012      	b.n	8000f8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f68:	f7ff fdd8 	bl	8000b1c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d90b      	bls.n	8000f8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2205      	movs	r2, #5
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e012      	b.n	8000fb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e5      	bne.n	8000f68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e006      	b.n	8000fb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000faa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
  }
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fda:	7ffb      	ldrb	r3, [r7, #31]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d003      	beq.n	8000fe8 <HAL_CAN_AddTxMessage+0x2c>
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	f040 80ad 	bne.w	8001142 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8095 	beq.w	8001132 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	0e1b      	lsrs	r3, r3, #24
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10d      	bne.n	8001040 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800102e:	68f9      	ldr	r1, [r7, #12]
 8001030:	6809      	ldr	r1, [r1, #0]
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3318      	adds	r3, #24
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	440b      	add	r3, r1
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e00f      	b.n	8001060 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800104a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001050:	68f9      	ldr	r1, [r7, #12]
 8001052:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001054:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3318      	adds	r3, #24
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	440b      	add	r3, r1
 800105e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3318      	adds	r3, #24
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	440b      	add	r3, r1
 8001070:	3304      	adds	r3, #4
 8001072:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	7d1b      	ldrb	r3, [r3, #20]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d111      	bne.n	80010a0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3318      	adds	r3, #24
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4413      	add	r3, r2
 8001088:	3304      	adds	r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	6811      	ldr	r1, [r2, #0]
 8001090:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3318      	adds	r3, #24
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	440b      	add	r3, r1
 800109c:	3304      	adds	r3, #4
 800109e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3307      	adds	r3, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	061a      	lsls	r2, r3, #24
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3306      	adds	r3, #6
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3305      	adds	r3, #5
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	4313      	orrs	r3, r2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	3204      	adds	r2, #4
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	4610      	mov	r0, r2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	6811      	ldr	r1, [r2, #0]
 80010c8:	ea43 0200 	orr.w	r2, r3, r0
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	440b      	add	r3, r1
 80010d2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80010d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3303      	adds	r3, #3
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	061a      	lsls	r2, r3, #24
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3302      	adds	r3, #2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4313      	orrs	r3, r2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	4610      	mov	r0, r2
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	ea43 0200 	orr.w	r2, r3, r0
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	440b      	add	r3, r1
 8001108:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800110c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3318      	adds	r3, #24
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6811      	ldr	r1, [r2, #0]
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3318      	adds	r3, #24
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	440b      	add	r3, r1
 800112c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e00e      	b.n	8001150 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001136:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e006      	b.n	8001150 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
  }
}
 8001150:	4618      	mov	r0, r3
 8001152:	3724      	adds	r7, #36	@ 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001170:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d003      	beq.n	8001180 <HAL_CAN_GetRxMessage+0x24>
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b02      	cmp	r3, #2
 800117c:	f040 8103 	bne.w	8001386 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10e      	bne.n	80011a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d116      	bne.n	80011c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001198:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0f7      	b.n	8001394 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d107      	bne.n	80011c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e8      	b.n	8001394 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	331b      	adds	r3, #27
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0204 	and.w	r2, r3, #4
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10c      	bne.n	80011fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	331b      	adds	r3, #27
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e00b      	b.n	8001212 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	331b      	adds	r3, #27
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	4413      	add	r3, r2
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	331b      	adds	r3, #27
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4413      	add	r3, r2
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0202 	and.w	r2, r3, #2
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	331b      	adds	r3, #27
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2208      	movs	r2, #8
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	e00b      	b.n	8001260 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	331b      	adds	r3, #27
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	3304      	adds	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 020f 	and.w	r2, r3, #15
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	331b      	adds	r3, #27
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	3304      	adds	r3, #4
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b2da      	uxtb	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	3304      	adds	r3, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0a1a      	lsrs	r2, r3, #8
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0c1a      	lsrs	r2, r3, #16
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	3302      	adds	r3, #2
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0e1a      	lsrs	r2, r3, #24
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3303      	adds	r3, #3
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3304      	adds	r3, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0a1a      	lsrs	r2, r3, #8
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	3305      	adds	r3, #5
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4413      	add	r3, r2
 8001330:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	0c1a      	lsrs	r2, r3, #16
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	3306      	adds	r3, #6
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4413      	add	r3, r2
 800134a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0e1a      	lsrs	r2, r3, #24
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3307      	adds	r3, #7
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0220 	orr.w	r2, r2, #32
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e007      	b.n	8001382 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0220 	orr.w	r2, r2, #32
 8001380:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e006      	b.n	8001394 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d002      	beq.n	80013be <HAL_CAN_ActivateNotification+0x1e>
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d109      	bne.n	80013d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6959      	ldr	r1, [r3, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e006      	b.n	80013e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d07c      	beq.n	800152c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f983 	bl	800175a <HAL_CAN_TxMailbox0CompleteCallback>
 8001454:	e016      	b.n	8001484 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
 8001468:	e00c      	b.n	8001484 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	e002      	b.n	8001484 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f989 	bl	8001796 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d024      	beq.n	80014d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001496:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f963 	bl	800176e <HAL_CAN_TxMailbox1CompleteCallback>
 80014a8:	e016      	b.n	80014d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80014bc:	e00c      	b.n	80014d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d0:	e002      	b.n	80014d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f969 	bl	80017aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d024      	beq.n	800152c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f943 	bl	8001782 <HAL_CAN_TxMailbox2CompleteCallback>
 80014fc:	e016      	b.n	800152c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001510:	e00c      	b.n	800152c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
 8001524:	e002      	b.n	800152c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f949 	bl	80017be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00c      	beq.n	8001550 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2210      	movs	r2, #16
 800154e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2208      	movs	r2, #8
 800156a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f930 	bl	80017d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff f93e 	bl	800080c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00c      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2210      	movs	r2, #16
 80015b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2208      	movs	r2, #8
 80015ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f912 	bl	80017fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8f9 	bl	80017e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2210      	movs	r2, #16
 800160e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f8fc 	bl	800180e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2208      	movs	r2, #8
 8001630:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8f5 	bl	8001822 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d07b      	beq.n	800173a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d072      	beq.n	8001732 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d043      	beq.n	8001732 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03e      	beq.n	8001732 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016ba:	2b60      	cmp	r3, #96	@ 0x60
 80016bc:	d02b      	beq.n	8001716 <HAL_CAN_IRQHandler+0x32a>
 80016be:	2b60      	cmp	r3, #96	@ 0x60
 80016c0:	d82e      	bhi.n	8001720 <HAL_CAN_IRQHandler+0x334>
 80016c2:	2b50      	cmp	r3, #80	@ 0x50
 80016c4:	d022      	beq.n	800170c <HAL_CAN_IRQHandler+0x320>
 80016c6:	2b50      	cmp	r3, #80	@ 0x50
 80016c8:	d82a      	bhi.n	8001720 <HAL_CAN_IRQHandler+0x334>
 80016ca:	2b40      	cmp	r3, #64	@ 0x40
 80016cc:	d019      	beq.n	8001702 <HAL_CAN_IRQHandler+0x316>
 80016ce:	2b40      	cmp	r3, #64	@ 0x40
 80016d0:	d826      	bhi.n	8001720 <HAL_CAN_IRQHandler+0x334>
 80016d2:	2b30      	cmp	r3, #48	@ 0x30
 80016d4:	d010      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x30c>
 80016d6:	2b30      	cmp	r3, #48	@ 0x30
 80016d8:	d822      	bhi.n	8001720 <HAL_CAN_IRQHandler+0x334>
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d002      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x2f8>
 80016de:	2b20      	cmp	r3, #32
 80016e0:	d005      	beq.n	80016ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016e2:	e01d      	b.n	8001720 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016ec:	e019      	b.n	8001722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016f6:	e014      	b.n	8001722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001700:	e00f      	b.n	8001722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800170a:	e00a      	b.n	8001722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001714:	e005      	b.n	8001722 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800171e:	e000      	b.n	8001722 <HAL_CAN_IRQHandler+0x336>
            break;
 8001720:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001730:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2204      	movs	r2, #4
 8001738:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f872 	bl	8001836 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	@ 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	@ (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	@ (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	@ (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	@ (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	@ (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	@ (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	@ (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	@ (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	@ (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	@ (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	@ (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	@ (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e101      	b.n	8001fbe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f005 fb89 	bl	80074ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de8:	d102      	bne.n	8001df0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 ff70 	bl	8003cda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7c1a      	ldrb	r2, [r3, #16]
 8001e02:	f88d 2000 	strb.w	r2, [sp]
 8001e06:	3304      	adds	r3, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	f001 fe4f 	bl	8003aac <USB_CoreInit>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0ce      	b.n	8001fbe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 ff68 	bl	8003cfc <USB_SetCurrentMode>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0bf      	b.n	8001fbe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e04a      	b.n	8001eda <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3315      	adds	r3, #21
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3314      	adds	r3, #20
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b298      	uxth	r0, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	332e      	adds	r3, #46	@ 0x2e
 8001e80:	4602      	mov	r2, r0
 8001e82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3318      	adds	r3, #24
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	331c      	adds	r3, #28
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3320      	adds	r3, #32
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3324      	adds	r3, #36	@ 0x24
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	791b      	ldrb	r3, [r3, #4]
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3af      	bcc.n	8001e44 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e044      	b.n	8001f74 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	791b      	ldrb	r3, [r3, #4]
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3b5      	bcc.n	8001eea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7c1a      	ldrb	r2, [r3, #16]
 8001f86:	f88d 2000 	strb.w	r2, [sp]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8e:	f001 ff01 	bl	8003d94 <USB_DevInit>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e00c      	b.n	8001fbe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 ff4b 	bl	8004e52 <USB_DevDisconnect>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_Start+0x1c>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e022      	b.n	8002028 <HAL_PCD_Start+0x62>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f001 fe52 	bl	8003cb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fef9 	bl	8004e10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08d      	sub	sp, #52	@ 0x34
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 ffb7 	bl	8004fba <USB_GetMode>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 848c 	bne.w	800296c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f002 ff1b 	bl	8004e94 <USB_ReadInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8482 	beq.w	800296a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f002 ff08 	bl	8004e94 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d107      	bne.n	800209e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f002 0202 	and.w	r2, r2, #2
 800209c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fef6 	bl	8004e94 <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d161      	bne.n	8002176 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0210 	bic.w	r2, r2, #16
 80020c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	0c5b      	lsrs	r3, r3, #17
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d124      	bne.n	8002138 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d035      	beq.n	8002166 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	f002 fd2d 	bl	8004b6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	441a      	add	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002130:	441a      	add	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	e016      	b.n	8002166 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	0c5b      	lsrs	r3, r3, #17
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	2b06      	cmp	r3, #6
 8002142:	d110      	bne.n	8002166 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800214a:	2208      	movs	r2, #8
 800214c:	4619      	mov	r1, r3
 800214e:	6a38      	ldr	r0, [r7, #32]
 8002150:	f002 fd0c 	bl	8004b6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002160:	441a      	add	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0210 	orr.w	r2, r2, #16
 8002174:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fe8a 	bl	8004e94 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002186:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800218a:	f040 80a7 	bne.w	80022dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fe8f 	bl	8004eba <USB_ReadDevAllOutEpInterrupt>
 800219c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800219e:	e099      	b.n	80022d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 808e 	beq.w	80022c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 feb3 	bl	8004f22 <USB_ReadDevOutEPInterrupt>
 80021bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00c      	beq.n	80021e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d4:	461a      	mov	r2, r3
 80021d6:	2301      	movs	r3, #1
 80021d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fea3 	bl	8002f28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00c      	beq.n	8002206 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f8:	461a      	mov	r2, r3
 80021fa:	2308      	movs	r3, #8
 80021fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 ff79 	bl	80030f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	2310      	movs	r3, #16
 8002220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d030      	beq.n	800228e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002234:	2b80      	cmp	r3, #128	@ 0x80
 8002236:	d109      	bne.n	800224c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800224c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	78db      	ldrb	r3, [r3, #3]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f005 fa3e 	bl	80076f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	2302      	movs	r3, #2
 800228c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	2320      	movs	r3, #32
 80022a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	3301      	adds	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f af62 	bne.w	80021a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fdd7 	bl	8004e94 <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022f0:	f040 80db 	bne.w	80024aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fdf8 	bl	8004eee <USB_ReadDevAllInEpInterrupt>
 80022fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002304:	e0cd      	b.n	80024a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80c2 	beq.w	8002496 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f002 fe1e 	bl	8004f5e <USB_ReadDevInEPInterrupt>
 8002322:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d057      	beq.n	80023de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	2201      	movs	r2, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	69f9      	ldr	r1, [r7, #28]
 800234a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800234e:	4013      	ands	r3, r2
 8002350:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800235e:	461a      	mov	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	799b      	ldrb	r3, [r3, #6]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d132      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3320      	adds	r3, #32
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4403      	add	r3, r0
 800238c:	331c      	adds	r3, #28
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4419      	add	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	3320      	adds	r3, #32
 80023a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d113      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x3a2>
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3324      	adds	r3, #36	@ 0x24
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023ca:	461a      	mov	r2, r3
 80023cc:	2101      	movs	r1, #1
 80023ce:	f002 fe25 	bl	800501c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f005 f908 	bl	80075ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023f4:	461a      	mov	r2, r3
 80023f6:	2308      	movs	r3, #8
 80023f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002410:	461a      	mov	r2, r3
 8002412:	2310      	movs	r3, #16
 8002414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800242c:	461a      	mov	r2, r3
 800242e:	2340      	movs	r3, #64	@ 0x40
 8002430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	6a38      	ldr	r0, [r7, #32]
 8002440:	f001 fe0c 	bl	800405c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	3310      	adds	r3, #16
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	78db      	ldrb	r3, [r3, #3]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2200      	movs	r2, #0
 8002464:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f005 f955 	bl	800771c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800247e:	461a      	mov	r2, r3
 8002480:	2302      	movs	r3, #2
 8002482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800248e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fcbd 	bl	8002e10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f af2e 	bne.w	8002306 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fcf0 	bl	8004e94 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024be:	d122      	bne.n	8002506 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fea3 	bl	8003234 <HAL_PCDEx_LPM_Callback>
 80024ee:	e002      	b.n	80024f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f005 f8f3 	bl	80076dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fcc2 	bl	8004e94 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800251a:	d112      	bne.n	8002542 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f005 f8af 	bl	8007690 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002540:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fca4 	bl	8004e94 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002556:	f040 80b7 	bne.w	80026c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2110      	movs	r1, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f001 fd71 	bl	800405c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800257e:	e046      	b.n	800260e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800258c:	461a      	mov	r2, r3
 800258e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002592:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a4:	0151      	lsls	r1, r2, #5
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	440a      	add	r2, r1
 80025aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80025ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025c0:	461a      	mov	r2, r3
 80025c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80025c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025d8:	0151      	lsls	r1, r2, #5
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	440a      	add	r2, r1
 80025de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80025e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f8:	0151      	lsls	r1, r2, #5
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002602:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002606:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260a:	3301      	adds	r3, #1
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002616:	4293      	cmp	r3, r2
 8002618:	d3b2      	bcc.n	8002580 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002628:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800262c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7bdb      	ldrb	r3, [r3, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800263c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002646:	f043 030b 	orr.w	r3, r3, #11
 800264a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800265c:	f043 030b 	orr.w	r3, r3, #11
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	e015      	b.n	8002690 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002672:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002676:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800267a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800268a:	f043 030b 	orr.w	r3, r3, #11
 800268e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800269e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80026a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026b2:	461a      	mov	r2, r3
 80026b4:	f002 fcb2 	bl	800501c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80026c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fbe1 	bl	8004e94 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026dc:	d123      	bne.n	8002726 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fc77 	bl	8004fd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 fd2e 	bl	800414e <USB_GetDevSpeed>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681c      	ldr	r4, [r3, #0]
 80026fe:	f001 f9c9 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8002702:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002708:	461a      	mov	r2, r3
 800270a:	4620      	mov	r0, r4
 800270c:	f001 fa32 	bl	8003b74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f004 ff94 	bl	800763e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002724:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fbb2 	bl	8004e94 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d10a      	bne.n	8002750 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f004 ff71 	bl	8007622 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f002 0208 	and.w	r2, r2, #8
 800274e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fb9d 	bl	8004e94 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002760:	2b80      	cmp	r3, #128	@ 0x80
 8002762:	d123      	bne.n	80027ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
 8002774:	e014      	b.n	80027a0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fb0a 	bl	8002dae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	3301      	adds	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	461a      	mov	r2, r3
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d3e4      	bcc.n	8002776 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fb6f 	bl	8004e94 <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027c0:	d13c      	bne.n	800283c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c6:	e02b      	b.n	8002820 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3318      	adds	r3, #24
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d115      	bne.n	800281a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80027ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da12      	bge.n	800281a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3317      	adds	r3, #23
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 faca 	bl	8002dae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	3301      	adds	r3, #1
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	461a      	mov	r2, r3
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	4293      	cmp	r3, r2
 800282a:	d3cd      	bcc.n	80027c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800283a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f002 fb27 	bl	8004e94 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002850:	d156      	bne.n	8002900 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002852:	2301      	movs	r3, #1
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
 8002856:	e045      	b.n	80028e4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d12e      	bne.n	80028de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002880:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	da2b      	bge.n	80028de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002892:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002896:	429a      	cmp	r2, r3
 8002898:	d121      	bne.n	80028de <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028da:	6053      	str	r3, [r2, #4]
            break;
 80028dc:	e008      	b.n	80028f0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d3b3      	bcc.n	8002858 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80028fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fac5 	bl	8004e94 <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002914:	d10a      	bne.n	800292c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f004 ff12 	bl	8007740 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800292a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f002 faaf 	bl	8004e94 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d115      	bne.n	800296c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f004 ff02 	bl	800775c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	e000      	b.n	800296c <HAL_PCD_IRQHandler+0x93c>
      return;
 800296a:	bf00      	nop
    }
  }
}
 800296c:	3734      	adds	r7, #52	@ 0x34
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}

08002972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_SetAddress+0x1a>
 8002988:	2302      	movs	r3, #2
 800298a:	e012      	b.n	80029b2 <HAL_PCD_SetAddress+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fa0e 	bl	8004dc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	4608      	mov	r0, r1
 80029c4:	4611      	mov	r1, r2
 80029c6:	461a      	mov	r2, r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	70fb      	strb	r3, [r7, #3]
 80029cc:	460b      	mov	r3, r1
 80029ce:	803b      	strh	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da0f      	bge.n	8002a00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 020f 	and.w	r2, r3, #15
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	3310      	adds	r3, #16
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	705a      	strb	r2, [r3, #1]
 80029fe:	e00f      	b.n	8002a20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002a2c:	883b      	ldrh	r3, [r7, #0]
 8002a2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	78ba      	ldrb	r2, [r7, #2]
 8002a3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a4e:	78bb      	ldrb	r3, [r7, #2]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d102      	bne.n	8002a5a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_EP_Open+0xae>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e00e      	b.n	8002a86 <HAL_PCD_EP_Open+0xcc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68f9      	ldr	r1, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fb8e 	bl	8004198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002a84:	7afb      	ldrb	r3, [r7, #11]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da0f      	bge.n	8002ac2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3310      	adds	r3, #16
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	705a      	strb	r2, [r3, #1]
 8002ac0:	e00f      	b.n	8002ae2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_EP_Close+0x6e>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e00e      	b.n	8002b1a <HAL_PCD_EP_Close+0x8c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 fbcc 	bl	80042a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	799b      	ldrb	r3, [r3, #6]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	799b      	ldrb	r3, [r3, #6]
 8002b86:	461a      	mov	r2, r3
 8002b88:	6979      	ldr	r1, [r7, #20]
 8002b8a:	f001 fc69 	bl	8004460 <USB_EPStartXfer>

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3310      	adds	r3, #16
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2201      	movs	r2, #1
 8002c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c08:	7afb      	ldrb	r3, [r7, #11]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	799b      	ldrb	r3, [r3, #6]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	799b      	ldrb	r3, [r3, #6]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6979      	ldr	r1, [r7, #20]
 8002c2e:	f001 fc17 	bl	8004460 <USB_EPStartXfer>

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	7912      	ldrb	r2, [r2, #4]
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e04f      	b.n	8002cfa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da0f      	bge.n	8002c82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3310      	adds	r3, #16
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	705a      	strb	r2, [r3, #1]
 8002c80:	e00d      	b.n	8002c9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_PCD_EP_SetStall+0x82>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e01d      	b.n	8002cfa <HAL_PCD_EP_SetStall+0xbe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 ffa5 	bl	8004c1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7999      	ldrb	r1, [r3, #6]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cea:	461a      	mov	r2, r3
 8002cec:	f002 f996 	bl	800501c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	7912      	ldrb	r2, [r2, #4]
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e042      	b.n	8002da6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0f      	bge.n	8002d48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3310      	adds	r3, #16
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	705a      	strb	r2, [r3, #1]
 8002d46:	e00f      	b.n	8002d68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_PCD_EP_ClrStall+0x86>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e00e      	b.n	8002da6 <HAL_PCD_EP_ClrStall+0xa4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 ffae 	bl	8004cf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da0c      	bge.n	8002ddc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e00c      	b.n	8002df6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fdcd 	bl	800499c <USB_EPStopXfer>
 8002e02:	4603      	mov	r3, r0
 8002e04:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	@ 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	3310      	adds	r3, #16
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	3304      	adds	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d901      	bls.n	8002e48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e06b      	b.n	8002f20 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d902      	bls.n	8002e64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3303      	adds	r3, #3
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e6c:	e02a      	b.n	8002ec4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d902      	bls.n	8002e8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f001 fe22 	bl	8004af0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	441a      	add	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d809      	bhi.n	8002eee <PCD_WriteEmptyTxFifo+0xde>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d203      	bcs.n	8002eee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1bf      	bne.n	8002e6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d811      	bhi.n	8002f1e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	2201      	movs	r2, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	6939      	ldr	r1, [r7, #16]
 8002f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	333c      	adds	r3, #60	@ 0x3c
 8002f40:	3304      	adds	r3, #4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	799b      	ldrb	r3, [r3, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d17b      	bne.n	8003056 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a61      	ldr	r2, [pc, #388]	@ (80030f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	f240 80b9 	bls.w	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80b3 	beq.w	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f90:	6093      	str	r3, [r2, #8]
 8002f92:	e0a7      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002faa:	461a      	mov	r2, r3
 8002fac:	2320      	movs	r3, #32
 8002fae:	6093      	str	r3, [r2, #8]
 8002fb0:	e098      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 8093 	bne.w	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80030f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d90f      	bls.n	8002fe6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	e07e      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	440b      	add	r3, r1
 8003008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	1ad2      	subs	r2, r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d114      	bne.n	8003048 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003030:	461a      	mov	r2, r3
 8003032:	2101      	movs	r1, #1
 8003034:	f001 fff2 	bl	800501c <USB_EP0_OutStart>
 8003038:	e006      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	441a      	add	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f004 fab2 	bl	80075b8 <HAL_PCD_DataOutStageCallback>
 8003054:	e046      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	4a26      	ldr	r2, [pc, #152]	@ (80030f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d124      	bne.n	80030a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	e032      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	2320      	movs	r3, #32
 8003098:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f004 fa89 	bl	80075b8 <HAL_PCD_DataOutStageCallback>
 80030a6:	e01d      	b.n	80030e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d114      	bne.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030d0:	461a      	mov	r2, r3
 80030d2:	2100      	movs	r1, #0
 80030d4:	f001 ffa2 	bl	800501c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f004 fa6a 	bl	80075b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	4f54300a 	.word	0x4f54300a
 80030f4:	4f54310a 	.word	0x4f54310a

080030f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	333c      	adds	r3, #60	@ 0x3c
 8003110:	3304      	adds	r3, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <PCD_EP_OutSetupPacket_int+0x88>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d90e      	bls.n	800314c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003144:	461a      	mov	r2, r3
 8003146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800314a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f004 fa21 	bl	8007594 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <PCD_EP_OutSetupPacket_int+0x88>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d90c      	bls.n	8003174 <PCD_EP_OutSetupPacket_int+0x7c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	799b      	ldrb	r3, [r3, #6]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800316c:	461a      	mov	r2, r3
 800316e:	2101      	movs	r1, #1
 8003170:	f001 ff54 	bl	800501c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	4f54300a 	.word	0x4f54300a

08003184 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4613      	mov	r3, r2
 8003192:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031a2:	883b      	ldrh	r3, [r7, #0]
 80031a4:	0419      	lsls	r1, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80031b0:	e028      	b.n	8003204 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	e00d      	b.n	80031e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	3340      	adds	r3, #64	@ 0x40
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	4413      	add	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	3301      	adds	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3ec      	bcc.n	80031c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031ec:	883b      	ldrh	r3, [r7, #0]
 80031ee:	0418      	lsls	r0, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4302      	orrs	r2, r0
 80031fc:	3340      	adds	r3, #64	@ 0x40
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e267      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d075      	beq.n	8003356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800326a:	4b88      	ldr	r3, [pc, #544]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b04      	cmp	r3, #4
 8003274:	d00c      	beq.n	8003290 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003276:	4b85      	ldr	r3, [pc, #532]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800327e:	2b08      	cmp	r3, #8
 8003280:	d112      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b82      	ldr	r3, [pc, #520]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800328e:	d10b      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	4b7e      	ldr	r3, [pc, #504]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05b      	beq.n	8003354 <HAL_RCC_OscConfig+0x108>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d157      	bne.n	8003354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e242      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x74>
 80032b2:	4b76      	ldr	r3, [pc, #472]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a75      	ldr	r2, [pc, #468]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xb0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x98>
 80032ca:	4b70      	ldr	r3, [pc, #448]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6f      	ldr	r2, [pc, #444]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b6d      	ldr	r3, [pc, #436]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6c      	ldr	r2, [pc, #432]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xb0>
 80032e4:	4b69      	ldr	r3, [pc, #420]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a68      	ldr	r2, [pc, #416]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b66      	ldr	r3, [pc, #408]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a65      	ldr	r2, [pc, #404]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fd fc0a 	bl	8000b1c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fd fc06 	bl	8000b1c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e207      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b5b      	ldr	r3, [pc, #364]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xc0>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fbf6 	bl	8000b1c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fd fbf2 	bl	8000b1c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1f3      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003346:	4b51      	ldr	r3, [pc, #324]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0xe8>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d063      	beq.n	800342a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003362:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003376:	2b08      	cmp	r3, #8
 8003378:	d11c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b44      	ldr	r3, [pc, #272]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	4b41      	ldr	r3, [pc, #260]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x152>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1c7      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4937      	ldr	r1, [pc, #220]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	e03a      	b.n	800342a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033bc:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_OscConfig+0x244>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fd fbab 	bl	8000b1c <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fd fba7 	bl	8000b1c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1a8      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033dc:	4b2b      	ldr	r3, [pc, #172]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b28      	ldr	r3, [pc, #160]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4925      	ldr	r1, [pc, #148]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <HAL_RCC_OscConfig+0x244>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd fb8a 	bl	8000b1c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340c:	f7fd fb86 	bl	8000b1c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e187      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341e:	4b1b      	ldr	r3, [pc, #108]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d036      	beq.n	80034a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <HAL_RCC_OscConfig+0x248>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd fb6a 	bl	8000b1c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fd fb66 	bl	8000b1c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e167      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_OscConfig+0x240>)
 8003460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x200>
 800346a:	e01b      	b.n	80034a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346c:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <HAL_RCC_OscConfig+0x248>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fd fb53 	bl	8000b1c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	e00e      	b.n	8003498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7fd fb4f 	bl	8000b1c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d907      	bls.n	8003498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e150      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
 800348c:	40023800 	.word	0x40023800
 8003490:	42470000 	.word	0x42470000
 8003494:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b88      	ldr	r3, [pc, #544]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ea      	bne.n	800347a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8097 	beq.w	80035e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b81      	ldr	r3, [pc, #516]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	4b7d      	ldr	r3, [pc, #500]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	4a7c      	ldr	r2, [pc, #496]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d2:	4b7a      	ldr	r3, [pc, #488]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b77      	ldr	r3, [pc, #476]	@ (80036c0 <HAL_RCC_OscConfig+0x474>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b74      	ldr	r3, [pc, #464]	@ (80036c0 <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a73      	ldr	r2, [pc, #460]	@ (80036c0 <HAL_RCC_OscConfig+0x474>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fd fb0f 	bl	8000b1c <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fd fb0b 	bl	8000b1c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e10c      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b6a      	ldr	r3, [pc, #424]	@ (80036c0 <HAL_RCC_OscConfig+0x474>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x2ea>
 8003528:	4b64      	ldr	r3, [pc, #400]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352c:	4a63      	ldr	r2, [pc, #396]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	@ 0x70
 8003534:	e01c      	b.n	8003570 <HAL_RCC_OscConfig+0x324>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x30c>
 800353e:	4b5f      	ldr	r3, [pc, #380]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003542:	4a5e      	ldr	r2, [pc, #376]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	@ 0x70
 800354a:	4b5c      	ldr	r3, [pc, #368]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	4a5b      	ldr	r2, [pc, #364]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	@ 0x70
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x324>
 8003558:	4b58      	ldr	r3, [pc, #352]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355c:	4a57      	ldr	r2, [pc, #348]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	@ 0x70
 8003564:	4b55      	ldr	r3, [pc, #340]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	4a54      	ldr	r2, [pc, #336]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd fad0 	bl	8000b1c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fd facc 	bl	8000b1c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0cb      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	4b49      	ldr	r3, [pc, #292]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ee      	beq.n	8003580 <HAL_RCC_OscConfig+0x334>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fd faba 	bl	8000b1c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fd fab6 	bl	8000b1c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0b5      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	4b3e      	ldr	r3, [pc, #248]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ee      	bne.n	80035ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	4a38      	ldr	r2, [pc, #224]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a1 	beq.w	800372c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ea:	4b34      	ldr	r3, [pc, #208]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d05c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d141      	bne.n	8003682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b31      	ldr	r3, [pc, #196]	@ (80036c4 <HAL_RCC_OscConfig+0x478>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fa8a 	bl	8000b1c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fa86 	bl	8000b1c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e087      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	491b      	ldr	r1, [pc, #108]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_RCC_OscConfig+0x478>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd fa5f 	bl	8000b1c <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd fa5b 	bl	8000b1c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e05c      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003674:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x416>
 8003680:	e054      	b.n	800372c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <HAL_RCC_OscConfig+0x478>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fa48 	bl	8000b1c <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd fa44 	bl	8000b1c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e045      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_OscConfig+0x470>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x444>
 80036ae:	e03d      	b.n	800372c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e038      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40007000 	.word	0x40007000
 80036c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_RCC_OscConfig+0x4ec>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d028      	beq.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d121      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d11a      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0cc      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003750:	4b68      	ldr	r3, [pc, #416]	@ (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d90c      	bls.n	8003778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b65      	ldr	r3, [pc, #404]	@ (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b63      	ldr	r3, [pc, #396]	@ (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0b8      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b59      	ldr	r3, [pc, #356]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a58      	ldr	r2, [pc, #352]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800379a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a8:	4b53      	ldr	r3, [pc, #332]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a52      	ldr	r2, [pc, #328]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b50      	ldr	r3, [pc, #320]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	494d      	ldr	r1, [pc, #308]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d044      	beq.n	800385c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	4b47      	ldr	r3, [pc, #284]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d119      	bne.n	800381a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e07f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	4b3f      	ldr	r3, [pc, #252]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e06f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e067      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381a:	4b37      	ldr	r3, [pc, #220]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4934      	ldr	r1, [pc, #208]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800382c:	f7fd f976 	bl	8000b1c <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	e00a      	b.n	800384a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fd f972 	bl	8000b1c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e04f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 020c 	and.w	r2, r3, #12
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	429a      	cmp	r2, r3
 800385a:	d1eb      	bne.n	8003834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385c:	4b25      	ldr	r3, [pc, #148]	@ (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d20c      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b22      	ldr	r3, [pc, #136]	@ (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b20      	ldr	r3, [pc, #128]	@ (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e032      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4916      	ldr	r1, [pc, #88]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ae:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	490e      	ldr	r1, [pc, #56]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c2:	f000 f821 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490a      	ldr	r1, [pc, #40]	@ (80038fc <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	4a09      	ldr	r2, [pc, #36]	@ (8003900 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd f8d6 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023c00 	.word	0x40023c00
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08007ca8 	.word	0x08007ca8
 8003900:	20000000 	.word	0x20000000
 8003904:	20000004 	.word	0x20000004

08003908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	b090      	sub	sp, #64	@ 0x40
 800390e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003920:	4b59      	ldr	r3, [pc, #356]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b08      	cmp	r3, #8
 800392a:	d00d      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x40>
 800392c:	2b08      	cmp	r3, #8
 800392e:	f200 80a1 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x34>
 8003936:	2b04      	cmp	r3, #4
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x3a>
 800393a:	e09b      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b53      	ldr	r3, [pc, #332]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x184>)
 800393e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003940:	e09b      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003942:	4b53      	ldr	r3, [pc, #332]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003944:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003946:	e098      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003948:	4b4f      	ldr	r3, [pc, #316]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x180>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003952:	4b4d      	ldr	r3, [pc, #308]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d028      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	2200      	movs	r2, #0
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	627a      	str	r2, [r7, #36]	@ 0x24
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003970:	2100      	movs	r1, #0
 8003972:	4b47      	ldr	r3, [pc, #284]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003974:	fb03 f201 	mul.w	r2, r3, r1
 8003978:	2300      	movs	r3, #0
 800397a:	fb00 f303 	mul.w	r3, r0, r3
 800397e:	4413      	add	r3, r2
 8003980:	4a43      	ldr	r2, [pc, #268]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003982:	fba0 1202 	umull	r1, r2, r0, r2
 8003986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003988:	460a      	mov	r2, r1
 800398a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800398c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398e:	4413      	add	r3, r2
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003994:	2200      	movs	r2, #0
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	61fa      	str	r2, [r7, #28]
 800399a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800399e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039a2:	f7fc fc19 	bl	80001d8 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4613      	mov	r3, r2
 80039ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ae:	e053      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b0:	4b35      	ldr	r3, [pc, #212]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	2200      	movs	r2, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	617a      	str	r2, [r7, #20]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039c2:	f04f 0b00 	mov.w	fp, #0
 80039c6:	4652      	mov	r2, sl
 80039c8:	465b      	mov	r3, fp
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	0159      	lsls	r1, r3, #5
 80039d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d8:	0150      	lsls	r0, r2, #5
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	ebb2 080a 	subs.w	r8, r2, sl
 80039e2:	eb63 090b 	sbc.w	r9, r3, fp
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039fa:	ebb2 0408 	subs.w	r4, r2, r8
 80039fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	00eb      	lsls	r3, r5, #3
 8003a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a10:	00e2      	lsls	r2, r4, #3
 8003a12:	4614      	mov	r4, r2
 8003a14:	461d      	mov	r5, r3
 8003a16:	eb14 030a 	adds.w	r3, r4, sl
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	eb45 030b 	adc.w	r3, r5, fp
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a2e:	4629      	mov	r1, r5
 8003a30:	028b      	lsls	r3, r1, #10
 8003a32:	4621      	mov	r1, r4
 8003a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a38:	4621      	mov	r1, r4
 8003a3a:	028a      	lsls	r2, r1, #10
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a42:	2200      	movs	r2, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a4c:	f7fc fbc4 	bl	80001d8 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3740      	adds	r7, #64	@ 0x40
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	017d7840 	.word	0x017d7840

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000000 	.word	0x20000000

08003aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aac:	b084      	sub	sp, #16
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	f107 001c 	add.w	r0, r7, #28
 8003aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003abe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d123      	bne.n	8003b0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 fae8 	bl	80050d8 <USB_CoreReset>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e01b      	b.n	8003b46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f001 fadc 	bl	80050d8 <USB_CoreReset>
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b38:	e005      	b.n	8003b46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b46:	7fbb      	ldrb	r3, [r7, #30]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10b      	bne.n	8003b64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f043 0206 	orr.w	r2, r3, #6
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b70:	b004      	add	sp, #16
 8003b72:	4770      	bx	lr

08003b74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d165      	bne.n	8003c54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4a41      	ldr	r2, [pc, #260]	@ (8003c90 <USB_SetTurnaroundTime+0x11c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d906      	bls.n	8003b9e <USB_SetTurnaroundTime+0x2a>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4a40      	ldr	r2, [pc, #256]	@ (8003c94 <USB_SetTurnaroundTime+0x120>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d202      	bcs.n	8003b9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b98:	230f      	movs	r3, #15
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e062      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8003c94 <USB_SetTurnaroundTime+0x120>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d306      	bcc.n	8003bb4 <USB_SetTurnaroundTime+0x40>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8003c98 <USB_SetTurnaroundTime+0x124>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d202      	bcs.n	8003bb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bae:	230e      	movs	r3, #14
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e057      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a38      	ldr	r2, [pc, #224]	@ (8003c98 <USB_SetTurnaroundTime+0x124>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d306      	bcc.n	8003bca <USB_SetTurnaroundTime+0x56>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a37      	ldr	r2, [pc, #220]	@ (8003c9c <USB_SetTurnaroundTime+0x128>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d202      	bcs.n	8003bca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bc4:	230d      	movs	r3, #13
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e04c      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4a33      	ldr	r2, [pc, #204]	@ (8003c9c <USB_SetTurnaroundTime+0x128>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d306      	bcc.n	8003be0 <USB_SetTurnaroundTime+0x6c>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a32      	ldr	r2, [pc, #200]	@ (8003ca0 <USB_SetTurnaroundTime+0x12c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d802      	bhi.n	8003be0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bda:	230c      	movs	r3, #12
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e041      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca0 <USB_SetTurnaroundTime+0x12c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d906      	bls.n	8003bf6 <USB_SetTurnaroundTime+0x82>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca4 <USB_SetTurnaroundTime+0x130>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d802      	bhi.n	8003bf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bf0:	230b      	movs	r3, #11
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e036      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca4 <USB_SetTurnaroundTime+0x130>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d906      	bls.n	8003c0c <USB_SetTurnaroundTime+0x98>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a29      	ldr	r2, [pc, #164]	@ (8003ca8 <USB_SetTurnaroundTime+0x134>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d802      	bhi.n	8003c0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c06:	230a      	movs	r3, #10
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e02b      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	@ (8003ca8 <USB_SetTurnaroundTime+0x134>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d906      	bls.n	8003c22 <USB_SetTurnaroundTime+0xae>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a25      	ldr	r2, [pc, #148]	@ (8003cac <USB_SetTurnaroundTime+0x138>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d202      	bcs.n	8003c22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c1c:	2309      	movs	r3, #9
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e020      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <USB_SetTurnaroundTime+0x138>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d306      	bcc.n	8003c38 <USB_SetTurnaroundTime+0xc4>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <USB_SetTurnaroundTime+0x13c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d802      	bhi.n	8003c38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c32:	2308      	movs	r3, #8
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e015      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb0 <USB_SetTurnaroundTime+0x13c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d906      	bls.n	8003c4e <USB_SetTurnaroundTime+0xda>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb4 <USB_SetTurnaroundTime+0x140>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d202      	bcs.n	8003c4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c48:	2307      	movs	r3, #7
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c4e:	2306      	movs	r3, #6
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e007      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c5a:	2309      	movs	r3, #9
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e001      	b.n	8003c64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c60:	2309      	movs	r3, #9
 8003c62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	029b      	lsls	r3, r3, #10
 8003c78:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	00d8acbf 	.word	0x00d8acbf
 8003c94:	00e4e1c0 	.word	0x00e4e1c0
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	01067380 	.word	0x01067380
 8003ca0:	011a499f 	.word	0x011a499f
 8003ca4:	01312cff 	.word	0x01312cff
 8003ca8:	014ca43f 	.word	0x014ca43f
 8003cac:	016e3600 	.word	0x016e3600
 8003cb0:	01a6ab1f 	.word	0x01a6ab1f
 8003cb4:	01e84800 	.word	0x01e84800

08003cb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d115      	bne.n	8003d4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d2a:	200a      	movs	r0, #10
 8003d2c:	f7fc ff02 	bl	8000b34 <HAL_Delay>
      ms += 10U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	330a      	adds	r3, #10
 8003d34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f001 f93f 	bl	8004fba <USB_GetMode>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d01e      	beq.n	8003d80 <USB_SetCurrentMode+0x84>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d46:	d9f0      	bls.n	8003d2a <USB_SetCurrentMode+0x2e>
 8003d48:	e01a      	b.n	8003d80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d115      	bne.n	8003d7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d5c:	200a      	movs	r0, #10
 8003d5e:	f7fc fee9 	bl	8000b34 <HAL_Delay>
      ms += 10U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	330a      	adds	r3, #10
 8003d66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f001 f926 	bl	8004fba <USB_GetMode>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <USB_SetCurrentMode+0x84>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d78:	d9f0      	bls.n	8003d5c <USB_SetCurrentMode+0x60>
 8003d7a:	e001      	b.n	8003d80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e005      	b.n	8003d8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d84:	d101      	bne.n	8003d8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d94:	b084      	sub	sp, #16
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e009      	b.n	8003dc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	3340      	adds	r3, #64	@ 0x40
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b0e      	cmp	r3, #14
 8003dcc:	d9f2      	bls.n	8003db4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11c      	bne.n	8003e10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de4:	f043 0302 	orr.w	r3, r3, #2
 8003de8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e0e:	e00b      	b.n	8003e28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2300      	movs	r3, #0
 8003e32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10d      	bne.n	8003e58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e44:	2100      	movs	r1, #0
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f968 	bl	800411c <USB_SetDevSpeed>
 8003e4c:	e008      	b.n	8003e60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e4e:	2101      	movs	r1, #1
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f963 	bl	800411c <USB_SetDevSpeed>
 8003e56:	e003      	b.n	8003e60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e58:	2103      	movs	r1, #3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f95e 	bl	800411c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e60:	2110      	movs	r1, #16
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8fa 	bl	800405c <USB_FlushTxFifo>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f924 	bl	80040c0 <USB_FlushRxFifo>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e94:	461a      	mov	r2, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e043      	b.n	8003f34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ec2:	d118      	bne.n	8003ef6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e013      	b.n	8003f08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eec:	461a      	mov	r2, r3
 8003eee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	e008      	b.n	8003f08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f14:	461a      	mov	r2, r3
 8003f16:	2300      	movs	r3, #0
 8003f18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f26:	461a      	mov	r2, r3
 8003f28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3301      	adds	r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f38:	461a      	mov	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d3b5      	bcc.n	8003eac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e043      	b.n	8003fce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f5c:	d118      	bne.n	8003f90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e013      	b.n	8003fa2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e008      	b.n	8003fa2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d3b5      	bcc.n	8003f46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ffa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <USB_DevInit+0x2c4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800401c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f043 0208 	orr.w	r2, r3, #8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004030:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004054:	b004      	add	sp, #16
 8004056:	4770      	bx	lr
 8004058:	803c3800 	.word	0x803c3800

0800405c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3301      	adds	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004076:	d901      	bls.n	800407c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e01b      	b.n	80040b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	daf2      	bge.n	800406a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	019b      	lsls	r3, r3, #6
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040a0:	d901      	bls.n	80040a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e006      	b.n	80040b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d0f0      	beq.n	8004094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040d8:	d901      	bls.n	80040de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e018      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	daf2      	bge.n	80040cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2210      	movs	r2, #16
 80040ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040fc:	d901      	bls.n	8004102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e006      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d0f0      	beq.n	80040f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800414e:	b480      	push	{r7}
 8004150:	b087      	sub	sp, #28
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
 8004172:	e00a      	b.n	800418a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d002      	beq.n	8004180 <USB_GetDevSpeed+0x32>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b06      	cmp	r3, #6
 800417e:	d102      	bne.n	8004186 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004180:	2302      	movs	r3, #2
 8004182:	75fb      	strb	r3, [r7, #23]
 8004184:	e001      	b.n	800418a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004186:	230f      	movs	r3, #15
 8004188:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d13a      	bne.n	800422a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	68f9      	ldr	r1, [r7, #12]
 80041ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d155      	bne.n	8004298 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	791b      	ldrb	r3, [r3, #4]
 8004206:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004208:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	059b      	lsls	r3, r3, #22
 800420e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004210:	4313      	orrs	r3, r2
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e036      	b.n	8004298 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	041b      	lsls	r3, r3, #16
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004248:	4313      	orrs	r3, r2
 800424a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11a      	bne.n	8004298 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	791b      	ldrb	r3, [r3, #4]
 800427c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800427e:	430b      	orrs	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004296:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d161      	bne.n	8004388 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042da:	d11f      	bne.n	800431c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80042fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004316:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800431a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	b29b      	uxth	r3, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800433c:	4013      	ands	r3, r2
 800433e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004360:	4013      	ands	r3, r2
 8004362:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	0159      	lsls	r1, r3, #5
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	440b      	add	r3, r1
 800437a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437e:	4619      	mov	r1, r3
 8004380:	4b35      	ldr	r3, [pc, #212]	@ (8004458 <USB_DeactivateEndpoint+0x1b0>)
 8004382:	4013      	ands	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
 8004386:	e060      	b.n	800444a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800439a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800439e:	d11f      	bne.n	80043e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	2101      	movs	r1, #1
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	43db      	mvns	r3, r3
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004400:	4013      	ands	r3, r2
 8004402:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	43db      	mvns	r3, r3
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004424:	4013      	ands	r3, r2
 8004426:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0159      	lsls	r1, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	440b      	add	r3, r1
 800443e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004442:	4619      	mov	r1, r3
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <USB_DeactivateEndpoint+0x1b4>)
 8004446:	4013      	ands	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	ec337800 	.word	0xec337800
 800445c:	eff37800 	.word	0xeff37800

08004460 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 817f 	bne.w	8004780 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d132      	bne.n	80044f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044e8:	0cdb      	lsrs	r3, r3, #19
 80044ea:	04db      	lsls	r3, r3, #19
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	e097      	b.n	8004620 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800450a:	0cdb      	lsrs	r3, r3, #19
 800450c:	04db      	lsls	r3, r3, #19
 800450e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	440a      	add	r2, r1
 8004526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800452a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800452e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004532:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11a      	bne.n	8004570 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	d903      	bls.n	800454e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004568:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800456c:	6113      	str	r3, [r2, #16]
 800456e:	e044      	b.n	80045fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4413      	add	r3, r2
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	8afb      	ldrh	r3, [r7, #22]
 8004596:	04d9      	lsls	r1, r3, #19
 8004598:	4ba4      	ldr	r3, [pc, #656]	@ (800482c <USB_EPStartXfer+0x3cc>)
 800459a:	400b      	ands	r3, r1
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	0148      	lsls	r0, r1, #5
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	4401      	add	r1, r0
 80045a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045a8:	4313      	orrs	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	791b      	ldrb	r3, [r3, #4]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d122      	bne.n	80045fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80045d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	075b      	lsls	r3, r3, #29
 80045e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	0148      	lsls	r0, r1, #5
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	4401      	add	r1, r0
 80045f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	0148      	lsls	r0, r1, #5
 8004614:	69f9      	ldr	r1, [r7, #28]
 8004616:	4401      	add	r1, r0
 8004618:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800461c:	4313      	orrs	r3, r2
 800461e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d14b      	bne.n	80046be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	791b      	ldrb	r3, [r3, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d128      	bne.n	800469c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d110      	bne.n	800467c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004674:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e00f      	b.n	800469c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e166      	b.n	800498c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80046dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	791b      	ldrb	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d015      	beq.n	8004712 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 814e 	beq.w	800498c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	69f9      	ldr	r1, [r7, #28]
 8004708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800470c:	4313      	orrs	r3, r2
 800470e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004710:	e13c      	b.n	800498c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d110      	bne.n	8004744 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800473c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e00f      	b.n	8004764 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004762:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68d9      	ldr	r1, [r3, #12]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	b298      	uxth	r0, r3
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4603      	mov	r3, r0
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f9b9 	bl	8004af0 <USB_WritePacket>
 800477e:	e105      	b.n	800498c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800479a:	0cdb      	lsrs	r3, r3, #19
 800479c:	04db      	lsls	r3, r3, #19
 800479e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047c2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d132      	bne.n	8004830 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	0148      	lsls	r0, r1, #5
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	4401      	add	r1, r0
 8004800:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004804:	4313      	orrs	r3, r2
 8004806:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004822:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004826:	6113      	str	r3, [r2, #16]
 8004828:	e062      	b.n	80048f0 <USB_EPStartXfer+0x490>
 800482a:	bf00      	nop
 800482c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d123      	bne.n	8004880 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484e:	69b9      	ldr	r1, [r7, #24]
 8004850:	0148      	lsls	r0, r1, #5
 8004852:	69f9      	ldr	r1, [r7, #28]
 8004854:	4401      	add	r1, r0
 8004856:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800485a:	4313      	orrs	r3, r2
 800485c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004878:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800487c:	6113      	str	r3, [r2, #16]
 800487e:	e037      	b.n	80048f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4413      	add	r3, r2
 800488a:	1e5a      	subs	r2, r3, #1
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	8afa      	ldrh	r2, [r7, #22]
 800489c:	fb03 f202 	mul.w	r2, r3, r2
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	8afb      	ldrh	r3, [r7, #22]
 80048b4:	04d9      	lsls	r1, r3, #19
 80048b6:	4b38      	ldr	r3, [pc, #224]	@ (8004998 <USB_EPStartXfer+0x538>)
 80048b8:	400b      	ands	r3, r1
 80048ba:	69b9      	ldr	r1, [r7, #24]
 80048bc:	0148      	lsls	r0, r1, #5
 80048be:	69f9      	ldr	r1, [r7, #28]
 80048c0:	4401      	add	r1, r0
 80048c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048c6:	4313      	orrs	r3, r2
 80048c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e0:	69b9      	ldr	r1, [r7, #24]
 80048e2:	0148      	lsls	r0, r1, #5
 80048e4:	69f9      	ldr	r1, [r7, #28]
 80048e6:	4401      	add	r1, r0
 80048e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048ec:	4313      	orrs	r3, r2
 80048ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10d      	bne.n	8004912 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68d9      	ldr	r1, [r3, #12]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490e:	460a      	mov	r2, r1
 8004910:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	791b      	ldrb	r3, [r3, #4]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d128      	bne.n	800496c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d110      	bne.n	800494c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004944:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00f      	b.n	800496c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004986:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800498a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	1ff80000 	.word	0x1ff80000

0800499c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d14a      	bne.n	8004a50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049d2:	f040 8086 	bne.w	8004ae2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	7812      	ldrb	r2, [r2, #0]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	7812      	ldrb	r2, [r2, #0]
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d902      	bls.n	8004a34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
          break;
 8004a32:	e056      	b.n	8004ae2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a4c:	d0e7      	beq.n	8004a1e <USB_EPStopXfer+0x82>
 8004a4e:	e048      	b.n	8004ae2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a68:	d13b      	bne.n	8004ae2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ab0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d902      	bls.n	8004ac8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ac6:	e00c      	b.n	8004ae2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae0:	d0e7      	beq.n	8004ab2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	@ 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	460b      	mov	r3, r1
 8004b00:	71fb      	strb	r3, [r7, #7]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d123      	bne.n	8004b5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b16:	88bb      	ldrh	r3, [r7, #4]
 8004b18:	3303      	adds	r3, #3
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e018      	b.n	8004b56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	031a      	lsls	r2, r3, #12
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b30:	461a      	mov	r2, r3
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3e2      	bcc.n	8004b24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3724      	adds	r7, #36	@ 0x24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b08b      	sub	sp, #44	@ 0x2c
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	e014      	b.n	8004bc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	3301      	adds	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	3301      	adds	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	6a3a      	ldr	r2, [r7, #32]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d3e6      	bcc.n	8004b98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004bca:	8bfb      	ldrh	r3, [r7, #30]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f107 0310 	add.w	r3, r7, #16
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	701a      	strb	r2, [r3, #0]
      i++;
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004c02:	8bfb      	ldrh	r3, [r7, #30]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c08:	8bfb      	ldrh	r3, [r7, #30]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ea      	bne.n	8004be4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	372c      	adds	r7, #44	@ 0x2c
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d12c      	bne.n	8004c92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	db12      	blt.n	8004c70 <USB_EPSetStall+0x54>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00f      	beq.n	8004c70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e02b      	b.n	8004cea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	db12      	blt.n	8004cca <USB_EPSetStall+0xae>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00f      	beq.n	8004cca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d128      	bne.n	8004d66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	791b      	ldrb	r3, [r3, #4]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d003      	beq.n	8004d44 <USB_EPClearStall+0x4c>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	791b      	ldrb	r3, [r3, #4]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d138      	bne.n	8004db6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e027      	b.n	8004db6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	791b      	ldrb	r3, [r3, #4]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d003      	beq.n	8004d96 <USB_EPClearStall+0x9e>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	791b      	ldrb	r3, [r3, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d10f      	bne.n	8004db6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004de2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004de6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e3e:	f023 0302 	bic.w	r3, r3, #2
 8004e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e6c:	f023 0303 	bic.w	r3, r3, #3
 8004e70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	b29b      	uxth	r3, r3
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f50:	68bb      	ldr	r3, [r7, #8]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	01db      	lsls	r3, r3, #7
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fac:	68bb      	ldr	r3, [r7, #8]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ff4:	f023 0307 	bic.w	r3, r3, #7
 8004ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800500c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	460b      	mov	r3, r1
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	333c      	adds	r3, #60	@ 0x3c
 8005032:	3304      	adds	r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4a26      	ldr	r2, [pc, #152]	@ (80050d4 <USB_EP0_OutStart+0xb8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d90a      	bls.n	8005056 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800504c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005050:	d101      	bne.n	8005056 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e037      	b.n	80050c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005084:	f043 0318 	orr.w	r3, r3, #24
 8005088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005098:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800509c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10f      	bne.n	80050c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80050c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	4f54300a 	.word	0x4f54300a

080050d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050f0:	d901      	bls.n	80050f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e01b      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	daf2      	bge.n	80050e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800511a:	d901      	bls.n	8005120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e006      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d0f0      	beq.n	800510e <USB_CoreReset+0x36>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005148:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800514c:	f002 fc9e 	bl	8007a8c <USBD_static_malloc>
 8005150:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	32b0      	adds	r2, #176	@ 0xb0
 8005162:	2100      	movs	r1, #0
 8005164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005168:	2302      	movs	r3, #2
 800516a:	e0d4      	b.n	8005316 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800516c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005170:	2100      	movs	r1, #0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f002 fd2a 	bl	8007bcc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	32b0      	adds	r2, #176	@ 0xb0
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	32b0      	adds	r2, #176	@ 0xb0
 8005192:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7c1b      	ldrb	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d138      	bne.n	8005216 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <USBD_CDC_Init+0x1e4>)
 80051a6:	7819      	ldrb	r1, [r3, #0]
 80051a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051ac:	2202      	movs	r2, #2
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f002 fb49 	bl	8007846 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005320 <USBD_CDC_Init+0x1e4>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	f003 020f 	and.w	r2, r3, #15
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3324      	adds	r3, #36	@ 0x24
 80051ca:	2201      	movs	r2, #1
 80051cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051ce:	4b55      	ldr	r3, [pc, #340]	@ (8005324 <USBD_CDC_Init+0x1e8>)
 80051d0:	7819      	ldrb	r1, [r3, #0]
 80051d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051d6:	2202      	movs	r2, #2
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f002 fb34 	bl	8007846 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051de:	4b51      	ldr	r3, [pc, #324]	@ (8005324 <USBD_CDC_Init+0x1e8>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	f003 020f 	and.w	r2, r3, #15
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051f6:	2201      	movs	r2, #1
 80051f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80051fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005328 <USBD_CDC_Init+0x1ec>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	f003 020f 	and.w	r2, r3, #15
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	3326      	adds	r3, #38	@ 0x26
 8005210:	2210      	movs	r2, #16
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e035      	b.n	8005282 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005216:	4b42      	ldr	r3, [pc, #264]	@ (8005320 <USBD_CDC_Init+0x1e4>)
 8005218:	7819      	ldrb	r1, [r3, #0]
 800521a:	2340      	movs	r3, #64	@ 0x40
 800521c:	2202      	movs	r2, #2
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f002 fb11 	bl	8007846 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005224:	4b3e      	ldr	r3, [pc, #248]	@ (8005320 <USBD_CDC_Init+0x1e4>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3324      	adds	r3, #36	@ 0x24
 800523a:	2201      	movs	r2, #1
 800523c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800523e:	4b39      	ldr	r3, [pc, #228]	@ (8005324 <USBD_CDC_Init+0x1e8>)
 8005240:	7819      	ldrb	r1, [r3, #0]
 8005242:	2340      	movs	r3, #64	@ 0x40
 8005244:	2202      	movs	r2, #2
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f002 fafd 	bl	8007846 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800524c:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <USBD_CDC_Init+0x1e8>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005264:	2201      	movs	r2, #1
 8005266:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005268:	4b2f      	ldr	r3, [pc, #188]	@ (8005328 <USBD_CDC_Init+0x1ec>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 020f 	and.w	r2, r3, #15
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	3326      	adds	r3, #38	@ 0x26
 800527e:	2210      	movs	r2, #16
 8005280:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005282:	4b29      	ldr	r3, [pc, #164]	@ (8005328 <USBD_CDC_Init+0x1ec>)
 8005284:	7819      	ldrb	r1, [r3, #0]
 8005286:	2308      	movs	r3, #8
 8005288:	2203      	movs	r2, #3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f002 fadb 	bl	8007846 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005290:	4b25      	ldr	r3, [pc, #148]	@ (8005328 <USBD_CDC_Init+0x1ec>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f003 020f 	and.w	r2, r3, #15
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3324      	adds	r3, #36	@ 0x24
 80052a6:	2201      	movs	r2, #1
 80052a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	33b0      	adds	r3, #176	@ 0xb0
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052e0:	2302      	movs	r3, #2
 80052e2:	e018      	b.n	8005316 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7c1b      	ldrb	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <USBD_CDC_Init+0x1e8>)
 80052ee:	7819      	ldrb	r1, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f002 fb92 	bl	8007a24 <USBD_LL_PrepareReceive>
 8005300:	e008      	b.n	8005314 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005302:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <USBD_CDC_Init+0x1e8>)
 8005304:	7819      	ldrb	r1, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800530c:	2340      	movs	r3, #64	@ 0x40
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f002 fb88 	bl	8007a24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000093 	.word	0x20000093
 8005324:	20000094 	.word	0x20000094
 8005328:	20000095 	.word	0x20000095

0800532c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005338:	4b3a      	ldr	r3, [pc, #232]	@ (8005424 <USBD_CDC_DeInit+0xf8>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f002 faa7 	bl	8007892 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005344:	4b37      	ldr	r3, [pc, #220]	@ (8005424 <USBD_CDC_DeInit+0xf8>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 020f 	and.w	r2, r3, #15
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3324      	adds	r3, #36	@ 0x24
 800535a:	2200      	movs	r2, #0
 800535c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800535e:	4b32      	ldr	r3, [pc, #200]	@ (8005428 <USBD_CDC_DeInit+0xfc>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f002 fa94 	bl	8007892 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800536a:	4b2f      	ldr	r3, [pc, #188]	@ (8005428 <USBD_CDC_DeInit+0xfc>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f003 020f 	and.w	r2, r3, #15
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005382:	2200      	movs	r2, #0
 8005384:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005386:	4b29      	ldr	r3, [pc, #164]	@ (800542c <USBD_CDC_DeInit+0x100>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f002 fa80 	bl	8007892 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005392:	4b26      	ldr	r3, [pc, #152]	@ (800542c <USBD_CDC_DeInit+0x100>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f003 020f 	and.w	r2, r3, #15
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	3324      	adds	r3, #36	@ 0x24
 80053a8:	2200      	movs	r2, #0
 80053aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053ac:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <USBD_CDC_DeInit+0x100>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3326      	adds	r3, #38	@ 0x26
 80053c2:	2200      	movs	r2, #0
 80053c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	32b0      	adds	r2, #176	@ 0xb0
 80053d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01f      	beq.n	8005418 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	33b0      	adds	r3, #176	@ 0xb0
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	32b0      	adds	r2, #176	@ 0xb0
 80053f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 fb54 	bl	8007aa8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	32b0      	adds	r2, #176	@ 0xb0
 800540a:	2100      	movs	r1, #0
 800540c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000093 	.word	0x20000093
 8005428:	20000094 	.word	0x20000094
 800542c:	20000095 	.word	0x20000095

08005430 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	32b0      	adds	r2, #176	@ 0xb0
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	e0bf      	b.n	80055e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005468:	2b00      	cmp	r3, #0
 800546a:	d050      	beq.n	800550e <USBD_CDC_Setup+0xde>
 800546c:	2b20      	cmp	r3, #32
 800546e:	f040 80af 	bne.w	80055d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	88db      	ldrh	r3, [r3, #6]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d03a      	beq.n	80054f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b25b      	sxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	da1b      	bge.n	80054bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	33b0      	adds	r3, #176	@ 0xb0
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800549a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	88d2      	ldrh	r2, [r2, #6]
 80054a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	88db      	ldrh	r3, [r3, #6]
 80054a6:	2b07      	cmp	r3, #7
 80054a8:	bf28      	it	cs
 80054aa:	2307      	movcs	r3, #7
 80054ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	89fa      	ldrh	r2, [r7, #14]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fd93 	bl	8006fe0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054ba:	e090      	b.n	80055de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	785a      	ldrb	r2, [r3, #1]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	88db      	ldrh	r3, [r3, #6]
 80054ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80054cc:	d803      	bhi.n	80054d6 <USBD_CDC_Setup+0xa6>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	88db      	ldrh	r3, [r3, #6]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	e000      	b.n	80054d8 <USBD_CDC_Setup+0xa8>
 80054d6:	2240      	movs	r2, #64	@ 0x40
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80054e6:	461a      	mov	r2, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fda5 	bl	8007038 <USBD_CtlPrepareRx>
      break;
 80054ee:	e076      	b.n	80055de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	33b0      	adds	r3, #176	@ 0xb0
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	7850      	ldrb	r0, [r2, #1]
 8005506:	2200      	movs	r2, #0
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	4798      	blx	r3
      break;
 800550c:	e067      	b.n	80055de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	2b0b      	cmp	r3, #11
 8005514:	d851      	bhi.n	80055ba <USBD_CDC_Setup+0x18a>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <USBD_CDC_Setup+0xec>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	0800554d 	.word	0x0800554d
 8005520:	080055c9 	.word	0x080055c9
 8005524:	080055bb 	.word	0x080055bb
 8005528:	080055bb 	.word	0x080055bb
 800552c:	080055bb 	.word	0x080055bb
 8005530:	080055bb 	.word	0x080055bb
 8005534:	080055bb 	.word	0x080055bb
 8005538:	080055bb 	.word	0x080055bb
 800553c:	080055bb 	.word	0x080055bb
 8005540:	080055bb 	.word	0x080055bb
 8005544:	08005577 	.word	0x08005577
 8005548:	080055a1 	.word	0x080055a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b03      	cmp	r3, #3
 8005556:	d107      	bne.n	8005568 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005558:	f107 030a 	add.w	r3, r7, #10
 800555c:	2202      	movs	r2, #2
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fd3d 	bl	8006fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005566:	e032      	b.n	80055ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fcbb 	bl	8006ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005570:	2303      	movs	r3, #3
 8005572:	75fb      	strb	r3, [r7, #23]
          break;
 8005574:	e02b      	b.n	80055ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d107      	bne.n	8005592 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005582:	f107 030d 	add.w	r3, r7, #13
 8005586:	2201      	movs	r2, #1
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fd28 	bl	8006fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005590:	e01d      	b.n	80055ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f001 fca6 	bl	8006ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 800559a:	2303      	movs	r3, #3
 800559c:	75fb      	strb	r3, [r7, #23]
          break;
 800559e:	e016      	b.n	80055ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d00f      	beq.n	80055cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 fc99 	bl	8006ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 80055b4:	2303      	movs	r3, #3
 80055b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055b8:	e008      	b.n	80055cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 fc92 	bl	8006ee6 <USBD_CtlError>
          ret = USBD_FAIL;
 80055c2:	2303      	movs	r3, #3
 80055c4:	75fb      	strb	r3, [r7, #23]
          break;
 80055c6:	e002      	b.n	80055ce <USBD_CDC_Setup+0x19e>
          break;
 80055c8:	bf00      	nop
 80055ca:	e008      	b.n	80055de <USBD_CDC_Setup+0x1ae>
          break;
 80055cc:	bf00      	nop
      }
      break;
 80055ce:	e006      	b.n	80055de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f001 fc87 	bl	8006ee6 <USBD_CtlError>
      ret = USBD_FAIL;
 80055d8:	2303      	movs	r3, #3
 80055da:	75fb      	strb	r3, [r7, #23]
      break;
 80055dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80055fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	32b0      	adds	r2, #176	@ 0xb0
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800560e:	2303      	movs	r3, #3
 8005610:	e065      	b.n	80056de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	32b0      	adds	r2, #176	@ 0xb0
 800561c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005620:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	f003 020f 	and.w	r2, r3, #15
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	3318      	adds	r3, #24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02f      	beq.n	800569c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	3318      	adds	r3, #24
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	f003 010f 	and.w	r1, r3, #15
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	460b      	mov	r3, r1
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	440b      	add	r3, r1
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4403      	add	r3, r0
 8005664:	331c      	adds	r3, #28
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	fbb2 f1f3 	udiv	r1, r2, r3
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005672:	2b00      	cmp	r3, #0
 8005674:	d112      	bne.n	800569c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3318      	adds	r3, #24
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800568e:	78f9      	ldrb	r1, [r7, #3]
 8005690:	2300      	movs	r3, #0
 8005692:	2200      	movs	r2, #0
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f002 f9a4 	bl	80079e2 <USBD_LL_Transmit>
 800569a:	e01f      	b.n	80056dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	33b0      	adds	r3, #176	@ 0xb0
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d010      	beq.n	80056dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	33b0      	adds	r3, #176	@ 0xb0
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	32b0      	adds	r2, #176	@ 0xb0
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	32b0      	adds	r2, #176	@ 0xb0
 800570c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005714:	2303      	movs	r3, #3
 8005716:	e01a      	b.n	800574e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f002 f9a2 	bl	8007a66 <USBD_LL_GetRxDataSize>
 8005722:	4602      	mov	r2, r0
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	33b0      	adds	r3, #176	@ 0xb0
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005748:	4611      	mov	r1, r2
 800574a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	32b0      	adds	r2, #176	@ 0xb0
 8005768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005774:	2303      	movs	r3, #3
 8005776:	e024      	b.n	80057c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	33b0      	adds	r3, #176	@ 0xb0
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d019      	beq.n	80057c0 <USBD_CDC_EP0_RxReady+0x6a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005792:	2bff      	cmp	r3, #255	@ 0xff
 8005794:	d014      	beq.n	80057c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	33b0      	adds	r3, #176	@ 0xb0
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80057ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	22ff      	movs	r2, #255	@ 0xff
 80057bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057d4:	2182      	movs	r1, #130	@ 0x82
 80057d6:	4818      	ldr	r0, [pc, #96]	@ (8005838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057d8:	f000 fd4f 	bl	800627a <USBD_GetEpDesc>
 80057dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057de:	2101      	movs	r1, #1
 80057e0:	4815      	ldr	r0, [pc, #84]	@ (8005838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057e2:	f000 fd4a 	bl	800627a <USBD_GetEpDesc>
 80057e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057e8:	2181      	movs	r1, #129	@ 0x81
 80057ea:	4813      	ldr	r0, [pc, #76]	@ (8005838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057ec:	f000 fd45 	bl	800627a <USBD_GetEpDesc>
 80057f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2210      	movs	r2, #16
 80057fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2200      	movs	r2, #0
 8005808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800580c:	711a      	strb	r2, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005820:	711a      	strb	r2, [r3, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2243      	movs	r2, #67	@ 0x43
 800582a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800582c:	4b02      	ldr	r3, [pc, #8]	@ (8005838 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000050 	.word	0x20000050

0800583c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005844:	2182      	movs	r1, #130	@ 0x82
 8005846:	4818      	ldr	r0, [pc, #96]	@ (80058a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005848:	f000 fd17 	bl	800627a <USBD_GetEpDesc>
 800584c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800584e:	2101      	movs	r1, #1
 8005850:	4815      	ldr	r0, [pc, #84]	@ (80058a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005852:	f000 fd12 	bl	800627a <USBD_GetEpDesc>
 8005856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005858:	2181      	movs	r1, #129	@ 0x81
 800585a:	4813      	ldr	r0, [pc, #76]	@ (80058a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800585c:	f000 fd0d 	bl	800627a <USBD_GetEpDesc>
 8005860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2210      	movs	r2, #16
 800586c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d006      	beq.n	8005882 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2200      	movs	r2, #0
 8005878:	711a      	strb	r2, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f042 0202 	orr.w	r2, r2, #2
 8005880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d006      	beq.n	8005896 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	711a      	strb	r2, [r3, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f042 0202 	orr.w	r2, r2, #2
 8005894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2243      	movs	r2, #67	@ 0x43
 800589a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800589c:	4b02      	ldr	r3, [pc, #8]	@ (80058a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000050 	.word	0x20000050

080058ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058b4:	2182      	movs	r1, #130	@ 0x82
 80058b6:	4818      	ldr	r0, [pc, #96]	@ (8005918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058b8:	f000 fcdf 	bl	800627a <USBD_GetEpDesc>
 80058bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058be:	2101      	movs	r1, #1
 80058c0:	4815      	ldr	r0, [pc, #84]	@ (8005918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058c2:	f000 fcda 	bl	800627a <USBD_GetEpDesc>
 80058c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058c8:	2181      	movs	r1, #129	@ 0x81
 80058ca:	4813      	ldr	r0, [pc, #76]	@ (8005918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058cc:	f000 fcd5 	bl	800627a <USBD_GetEpDesc>
 80058d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2210      	movs	r2, #16
 80058dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d006      	beq.n	80058f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ec:	711a      	strb	r2, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005900:	711a      	strb	r2, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2243      	movs	r2, #67	@ 0x43
 800590a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800590c:	4b02      	ldr	r3, [pc, #8]	@ (8005918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000050 	.word	0x20000050

0800591c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	220a      	movs	r2, #10
 8005928:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800592a:	4b03      	ldr	r3, [pc, #12]	@ (8005938 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	2000000c 	.word	0x2000000c

0800593c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800594c:	2303      	movs	r3, #3
 800594e:	e009      	b.n	8005964 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	33b0      	adds	r3, #176	@ 0xb0
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	32b0      	adds	r2, #176	@ 0xb0
 8005986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005992:	2303      	movs	r3, #3
 8005994:	e008      	b.n	80059a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	32b0      	adds	r2, #176	@ 0xb0
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e004      	b.n	80059e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	32b0      	adds	r2, #176	@ 0xb0
 8005a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a06:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e025      	b.n	8005a62 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11f      	bne.n	8005a60 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a28:	4b10      	ldr	r3, [pc, #64]	@ (8005a6c <USBD_CDC_TransmitPacket+0x7c>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4403      	add	r3, r0
 8005a42:	3318      	adds	r3, #24
 8005a44:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <USBD_CDC_TransmitPacket+0x7c>)
 8005a48:	7819      	ldrb	r1, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 ffc3 	bl	80079e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000093 	.word	0x20000093

08005a70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	32b0      	adds	r2, #176	@ 0xb0
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	32b0      	adds	r2, #176	@ 0xb0
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e018      	b.n	8005ad0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	7c1b      	ldrb	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <USBD_CDC_ReceivePacket+0x68>)
 8005aa8:	7819      	ldrb	r1, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 ffb5 	bl	8007a24 <USBD_LL_PrepareReceive>
 8005aba:	e008      	b.n	8005ace <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005abc:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <USBD_CDC_ReceivePacket+0x68>)
 8005abe:	7819      	ldrb	r1, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ac6:	2340      	movs	r3, #64	@ 0x40
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 ffab 	bl	8007a24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000094 	.word	0x20000094

08005adc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e01f      	b.n	8005b34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	79fa      	ldrb	r2, [r7, #7]
 8005b26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f001 fe25 	bl	8007778 <USBD_LL_Init>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e025      	b.n	8005ba0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	32ae      	adds	r2, #174	@ 0xae
 8005b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00f      	beq.n	8005b90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	32ae      	adds	r2, #174	@ 0xae
 8005b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	f107 020e 	add.w	r2, r7, #14
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
 8005b88:	4602      	mov	r2, r0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 fe2d 	bl	8007810 <USBD_LL_Start>
 8005bb6:	4603      	mov	r3, r0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 f90c 	bl	8006e72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005c68:	461a      	mov	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d01a      	beq.n	8005cb4 <USBD_LL_SetupStage+0x72>
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d822      	bhi.n	8005cc8 <USBD_LL_SetupStage+0x86>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <USBD_LL_SetupStage+0x4a>
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d00a      	beq.n	8005ca0 <USBD_LL_SetupStage+0x5e>
 8005c8a:	e01d      	b.n	8005cc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fb63 	bl	8006360 <USBD_StdDevReq>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9e:	e020      	b.n	8005ce2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fbcb 	bl	8006444 <USBD_StdItfReq>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb2:	e016      	b.n	8005ce2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fc2d 	bl	800651c <USBD_StdEPReq>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc6:	e00c      	b.n	8005ce2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fdfa 	bl	80078d0 <USBD_LL_StallEP>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce0:	bf00      	nop
  }

  return ret;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d16e      	bne.n	8005de2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005d0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	f040 8098 	bne.w	8005e48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d913      	bls.n	8005d4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	bf28      	it	cs
 8005d3e:	4613      	movcs	r3, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f001 f994 	bl	8007072 <USBD_CtlContinueRx>
 8005d4a:	e07d      	b.n	8005e48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d014      	beq.n	8005d84 <USBD_LL_DataOutStage+0x98>
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d81d      	bhi.n	8005d9a <USBD_LL_DataOutStage+0xae>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <USBD_LL_DataOutStage+0x7c>
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d003      	beq.n	8005d6e <USBD_LL_DataOutStage+0x82>
 8005d66:	e018      	b.n	8005d9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75bb      	strb	r3, [r7, #22]
            break;
 8005d6c:	e018      	b.n	8005da0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	4619      	mov	r1, r3
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa64 	bl	8006246 <USBD_CoreFindIF>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75bb      	strb	r3, [r7, #22]
            break;
 8005d82:	e00d      	b.n	8005da0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 fa66 	bl	8006260 <USBD_CoreFindEP>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75bb      	strb	r3, [r7, #22]
            break;
 8005d98:	e002      	b.n	8005da0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75bb      	strb	r3, [r7, #22]
            break;
 8005d9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005da0:	7dbb      	ldrb	r3, [r7, #22]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d119      	bne.n	8005dda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d113      	bne.n	8005dda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005db2:	7dba      	ldrb	r2, [r7, #22]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	32ae      	adds	r2, #174	@ 0xae
 8005db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005dc2:	7dba      	ldrb	r2, [r7, #22]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005dca:	7dba      	ldrb	r2, [r7, #22]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	32ae      	adds	r2, #174	@ 0xae
 8005dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f001 f95a 	bl	8007094 <USBD_CtlSendStatus>
 8005de0:	e032      	b.n	8005e48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005de2:	7afb      	ldrb	r3, [r7, #11]
 8005de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fa37 	bl	8006260 <USBD_CoreFindEP>
 8005df2:	4603      	mov	r3, r0
 8005df4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005df6:	7dbb      	ldrb	r3, [r7, #22]
 8005df8:	2bff      	cmp	r3, #255	@ 0xff
 8005dfa:	d025      	beq.n	8005e48 <USBD_LL_DataOutStage+0x15c>
 8005dfc:	7dbb      	ldrb	r3, [r7, #22]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d122      	bne.n	8005e48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d117      	bne.n	8005e3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e0e:	7dba      	ldrb	r2, [r7, #22]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	32ae      	adds	r2, #174	@ 0xae
 8005e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00f      	beq.n	8005e3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e1e:	7dba      	ldrb	r2, [r7, #22]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e26:	7dba      	ldrb	r2, [r7, #22]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	32ae      	adds	r2, #174	@ 0xae
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	7afa      	ldrb	r2, [r7, #11]
 8005e34:	4611      	mov	r1, r2
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	4798      	blx	r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	e000      	b.n	8005e4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d16f      	bne.n	8005f46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d15a      	bne.n	8005f2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d914      	bls.n	8005eac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f001 f8bc 	bl	8007016 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f001 fdbd 	bl	8007a24 <USBD_LL_PrepareReceive>
 8005eaa:	e03f      	b.n	8005f2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d11c      	bne.n	8005ef2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d316      	bcc.n	8005ef2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d20f      	bcs.n	8005ef2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f001 f89d 	bl	8007016 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f001 fd9a 	bl	8007a24 <USBD_LL_PrepareReceive>
 8005ef0:	e01c      	b.n	8005f2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d10f      	bne.n	8005f1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f1e:	2180      	movs	r1, #128	@ 0x80
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f001 fcd5 	bl	80078d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f001 f8c7 	bl	80070ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d03a      	beq.n	8005fac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff fe42 	bl	8005bc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f44:	e032      	b.n	8005fac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f985 	bl	8006260 <USBD_CoreFindEP>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2bff      	cmp	r3, #255	@ 0xff
 8005f5e:	d025      	beq.n	8005fac <USBD_LL_DataInStage+0x15a>
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d122      	bne.n	8005fac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d11c      	bne.n	8005fac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f72:	7dfa      	ldrb	r2, [r7, #23]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	32ae      	adds	r2, #174	@ 0xae
 8005f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d014      	beq.n	8005fac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f82:	7dfa      	ldrb	r2, [r7, #23]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f8a:	7dfa      	ldrb	r2, [r7, #23]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	32ae      	adds	r2, #174	@ 0xae
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	7afa      	ldrb	r2, [r7, #11]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	4798      	blx	r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005fa2:	7dbb      	ldrb	r3, [r7, #22]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005fa8:	7dbb      	ldrb	r3, [r7, #22]
 8005faa:	e000      	b.n	8005fae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6852      	ldr	r2, [r2, #4]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	4611      	mov	r1, r2
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800601c:	2340      	movs	r3, #64	@ 0x40
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fc0f 	bl	8007846 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2240      	movs	r2, #64	@ 0x40
 8006034:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006038:	2340      	movs	r3, #64	@ 0x40
 800603a:	2200      	movs	r2, #0
 800603c:	2180      	movs	r1, #128	@ 0x80
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fc01 	bl	8007846 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2240      	movs	r2, #64	@ 0x40
 800604e:	621a      	str	r2, [r3, #32]

  return ret;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	78fa      	ldrb	r2, [r7, #3]
 800606a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b04      	cmp	r3, #4
 800608c:	d006      	beq.n	800609c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006094:	b2da      	uxtb	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2204      	movs	r2, #4
 80060a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d106      	bne.n	80060d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d110      	bne.n	8006118 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	32ae      	adds	r2, #174	@ 0xae
 8006138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006140:	2303      	movs	r3, #3
 8006142:	e01c      	b.n	800617e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b03      	cmp	r3, #3
 800614e:	d115      	bne.n	800617c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	32ae      	adds	r2, #174	@ 0xae
 800615a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	32ae      	adds	r2, #174	@ 0xae
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	4611      	mov	r1, r2
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	32ae      	adds	r2, #174	@ 0xae
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e01c      	b.n	80061e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d115      	bne.n	80061e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32ae      	adds	r2, #174	@ 0xae
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32ae      	adds	r2, #174	@ 0xae
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	4611      	mov	r1, r2
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00e      	beq.n	800623c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6852      	ldr	r2, [r2, #4]
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	4611      	mov	r1, r2
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006252:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800626c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	b29b      	uxth	r3, r3
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	4293      	cmp	r3, r2
 800629e:	d91f      	bls.n	80062e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80062a6:	e013      	b.n	80062d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062a8:	f107 030a 	add.w	r3, r7, #10
 80062ac:	4619      	mov	r1, r3
 80062ae:	6978      	ldr	r0, [r7, #20]
 80062b0:	f000 f81b 	bl	80062ea <USBD_GetNextDesc>
 80062b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d108      	bne.n	80062d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	789b      	ldrb	r3, [r3, #2]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d008      	beq.n	80062de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	897b      	ldrh	r3, [r7, #10]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d8e5      	bhi.n	80062a8 <USBD_GetEpDesc+0x2e>
 80062dc:	e000      	b.n	80062e0 <USBD_GetEpDesc+0x66>
          break;
 80062de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80062e0:	693b      	ldr	r3, [r7, #16]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	4413      	add	r3, r2
 8006302:	b29a      	uxth	r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4413      	add	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006322:	b480      	push	{r7}
 8006324:	b087      	sub	sp, #28
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3301      	adds	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006340:	8a3b      	ldrh	r3, [r7, #16]
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	b21a      	sxth	r2, r3
 8006346:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800634a:	4313      	orrs	r3, r2
 800634c:	b21b      	sxth	r3, r3
 800634e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006350:	89fb      	ldrh	r3, [r7, #14]
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006376:	2b40      	cmp	r3, #64	@ 0x40
 8006378:	d005      	beq.n	8006386 <USBD_StdDevReq+0x26>
 800637a:	2b40      	cmp	r3, #64	@ 0x40
 800637c:	d857      	bhi.n	800642e <USBD_StdDevReq+0xce>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00f      	beq.n	80063a2 <USBD_StdDevReq+0x42>
 8006382:	2b20      	cmp	r3, #32
 8006384:	d153      	bne.n	800642e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	32ae      	adds	r2, #174	@ 0xae
 8006390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]
      break;
 80063a0:	e04a      	b.n	8006438 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	785b      	ldrb	r3, [r3, #1]
 80063a6:	2b09      	cmp	r3, #9
 80063a8:	d83b      	bhi.n	8006422 <USBD_StdDevReq+0xc2>
 80063aa:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <USBD_StdDevReq+0x50>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006419 	.word	0x08006419
 80063b8:	08006423 	.word	0x08006423
 80063bc:	0800640f 	.word	0x0800640f
 80063c0:	08006423 	.word	0x08006423
 80063c4:	080063e3 	.word	0x080063e3
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	08006423 	.word	0x08006423
 80063d0:	080063fb 	.word	0x080063fb
 80063d4:	080063ed 	.word	0x080063ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa3c 	bl	8006858 <USBD_GetDescriptor>
          break;
 80063e0:	e024      	b.n	800642c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fba1 	bl	8006b2c <USBD_SetAddress>
          break;
 80063ea:	e01f      	b.n	800642c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fbe0 	bl	8006bb4 <USBD_SetConfig>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
          break;
 80063f8:	e018      	b.n	800642c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fc83 	bl	8006d08 <USBD_GetConfig>
          break;
 8006402:	e013      	b.n	800642c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fcb4 	bl	8006d74 <USBD_GetStatus>
          break;
 800640c:	e00e      	b.n	800642c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fce3 	bl	8006ddc <USBD_SetFeature>
          break;
 8006416:	e009      	b.n	800642c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fd07 	bl	8006e2e <USBD_ClrFeature>
          break;
 8006420:	e004      	b.n	800642c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fd5e 	bl	8006ee6 <USBD_CtlError>
          break;
 800642a:	bf00      	nop
      }
      break;
 800642c:	e004      	b.n	8006438 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fd58 	bl	8006ee6 <USBD_CtlError>
      break;
 8006436:	bf00      	nop
  }

  return ret;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800645a:	2b40      	cmp	r3, #64	@ 0x40
 800645c:	d005      	beq.n	800646a <USBD_StdItfReq+0x26>
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d852      	bhi.n	8006508 <USBD_StdItfReq+0xc4>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <USBD_StdItfReq+0x26>
 8006466:	2b20      	cmp	r3, #32
 8006468:	d14e      	bne.n	8006508 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006470:	b2db      	uxtb	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	2b02      	cmp	r3, #2
 8006476:	d840      	bhi.n	80064fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	889b      	ldrh	r3, [r3, #4]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d836      	bhi.n	80064f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	889b      	ldrh	r3, [r3, #4]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fedb 	bl	8006246 <USBD_CoreFindIF>
 8006490:	4603      	mov	r3, r0
 8006492:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2bff      	cmp	r3, #255	@ 0xff
 8006498:	d01d      	beq.n	80064d6 <USBD_StdItfReq+0x92>
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d11a      	bne.n	80064d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064a0:	7bba      	ldrb	r2, [r7, #14]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32ae      	adds	r2, #174	@ 0xae
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00f      	beq.n	80064d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80064b0:	7bba      	ldrb	r2, [r7, #14]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064b8:	7bba      	ldrb	r2, [r7, #14]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	32ae      	adds	r2, #174	@ 0xae
 80064be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064ce:	e004      	b.n	80064da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80064d0:	2303      	movs	r3, #3
 80064d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064d4:	e001      	b.n	80064da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064d6:	2303      	movs	r3, #3
 80064d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	88db      	ldrh	r3, [r3, #6]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d110      	bne.n	8006504 <USBD_StdItfReq+0xc0>
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10d      	bne.n	8006504 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fdd3 	bl	8007094 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064ee:	e009      	b.n	8006504 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fcf7 	bl	8006ee6 <USBD_CtlError>
          break;
 80064f8:	e004      	b.n	8006504 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fcf2 	bl	8006ee6 <USBD_CtlError>
          break;
 8006502:	e000      	b.n	8006506 <USBD_StdItfReq+0xc2>
          break;
 8006504:	bf00      	nop
      }
      break;
 8006506:	e004      	b.n	8006512 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fceb 	bl	8006ee6 <USBD_CtlError>
      break;
 8006510:	bf00      	nop
  }

  return ret;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	889b      	ldrh	r3, [r3, #4]
 800652e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006538:	2b40      	cmp	r3, #64	@ 0x40
 800653a:	d007      	beq.n	800654c <USBD_StdEPReq+0x30>
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	f200 817f 	bhi.w	8006840 <USBD_StdEPReq+0x324>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02a      	beq.n	800659c <USBD_StdEPReq+0x80>
 8006546:	2b20      	cmp	r3, #32
 8006548:	f040 817a 	bne.w	8006840 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fe85 	bl	8006260 <USBD_CoreFindEP>
 8006556:	4603      	mov	r3, r0
 8006558:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800655a:	7b7b      	ldrb	r3, [r7, #13]
 800655c:	2bff      	cmp	r3, #255	@ 0xff
 800655e:	f000 8174 	beq.w	800684a <USBD_StdEPReq+0x32e>
 8006562:	7b7b      	ldrb	r3, [r7, #13]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 8170 	bne.w	800684a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800656a:	7b7a      	ldrb	r2, [r7, #13]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006572:	7b7a      	ldrb	r2, [r7, #13]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	32ae      	adds	r2, #174	@ 0xae
 8006578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8163 	beq.w	800684a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006584:	7b7a      	ldrb	r2, [r7, #13]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	32ae      	adds	r2, #174	@ 0xae
 800658a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800659a:	e156      	b.n	800684a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d008      	beq.n	80065b6 <USBD_StdEPReq+0x9a>
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	f300 8145 	bgt.w	8006834 <USBD_StdEPReq+0x318>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 809b 	beq.w	80066e6 <USBD_StdEPReq+0x1ca>
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d03c      	beq.n	800662e <USBD_StdEPReq+0x112>
 80065b4:	e13e      	b.n	8006834 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d002      	beq.n	80065c8 <USBD_StdEPReq+0xac>
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d016      	beq.n	80065f4 <USBD_StdEPReq+0xd8>
 80065c6:	e02c      	b.n	8006622 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <USBD_StdEPReq+0xce>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b80      	cmp	r3, #128	@ 0x80
 80065d2:	d00a      	beq.n	80065ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f979 	bl	80078d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065de:	2180      	movs	r1, #128	@ 0x80
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f975 	bl	80078d0 <USBD_LL_StallEP>
 80065e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e8:	e020      	b.n	800662c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fc7a 	bl	8006ee6 <USBD_CtlError>
              break;
 80065f2:	e01b      	b.n	800662c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	885b      	ldrh	r3, [r3, #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10e      	bne.n	800661a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <USBD_StdEPReq+0xfe>
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b80      	cmp	r3, #128	@ 0x80
 8006606:	d008      	beq.n	800661a <USBD_StdEPReq+0xfe>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	88db      	ldrh	r3, [r3, #6]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 f95b 	bl	80078d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fd3a 	bl	8007094 <USBD_CtlSendStatus>

              break;
 8006620:	e004      	b.n	800662c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fc5e 	bl	8006ee6 <USBD_CtlError>
              break;
 800662a:	bf00      	nop
          }
          break;
 800662c:	e107      	b.n	800683e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d002      	beq.n	8006640 <USBD_StdEPReq+0x124>
 800663a:	2b03      	cmp	r3, #3
 800663c:	d016      	beq.n	800666c <USBD_StdEPReq+0x150>
 800663e:	e04b      	b.n	80066d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <USBD_StdEPReq+0x146>
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b80      	cmp	r3, #128	@ 0x80
 800664a:	d00a      	beq.n	8006662 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f93d 	bl	80078d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006656:	2180      	movs	r1, #128	@ 0x80
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f939 	bl	80078d0 <USBD_LL_StallEP>
 800665e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006660:	e040      	b.n	80066e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fc3e 	bl	8006ee6 <USBD_CtlError>
              break;
 800666a:	e03b      	b.n	80066e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	885b      	ldrh	r3, [r3, #2]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d136      	bne.n	80066e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 f943 	bl	800790e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fd03 	bl	8007094 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fde4 	bl	8006260 <USBD_CoreFindEP>
 8006698:	4603      	mov	r3, r0
 800669a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800669c:	7b7b      	ldrb	r3, [r7, #13]
 800669e:	2bff      	cmp	r3, #255	@ 0xff
 80066a0:	d01f      	beq.n	80066e2 <USBD_StdEPReq+0x1c6>
 80066a2:	7b7b      	ldrb	r3, [r7, #13]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11c      	bne.n	80066e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066a8:	7b7a      	ldrb	r2, [r7, #13]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80066b0:	7b7a      	ldrb	r2, [r7, #13]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32ae      	adds	r2, #174	@ 0xae
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d010      	beq.n	80066e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066c0:	7b7a      	ldrb	r2, [r7, #13]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	32ae      	adds	r2, #174	@ 0xae
 80066c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066d6:	e004      	b.n	80066e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fc03 	bl	8006ee6 <USBD_CtlError>
              break;
 80066e0:	e000      	b.n	80066e4 <USBD_StdEPReq+0x1c8>
              break;
 80066e2:	bf00      	nop
          }
          break;
 80066e4:	e0ab      	b.n	800683e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d002      	beq.n	80066f8 <USBD_StdEPReq+0x1dc>
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d032      	beq.n	800675c <USBD_StdEPReq+0x240>
 80066f6:	e097      	b.n	8006828 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <USBD_StdEPReq+0x1f2>
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b80      	cmp	r3, #128	@ 0x80
 8006702:	d004      	beq.n	800670e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fbed 	bl	8006ee6 <USBD_CtlError>
                break;
 800670c:	e091      	b.n	8006832 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da0b      	bge.n	800672e <USBD_StdEPReq+0x212>
 8006716:	7bbb      	ldrb	r3, [r7, #14]
 8006718:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	3310      	adds	r3, #16
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	3304      	adds	r3, #4
 800672c:	e00b      	b.n	8006746 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	4413      	add	r3, r2
 8006744:	3304      	adds	r3, #4
 8006746:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2202      	movs	r2, #2
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fc43 	bl	8006fe0 <USBD_CtlSendData>
              break;
 800675a:	e06a      	b.n	8006832 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800675c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	da11      	bge.n	8006788 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	3324      	adds	r3, #36	@ 0x24
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d117      	bne.n	80067ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fbb0 	bl	8006ee6 <USBD_CtlError>
                  break;
 8006786:	e054      	b.n	8006832 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fb9d 	bl	8006ee6 <USBD_CtlError>
                  break;
 80067ac:	e041      	b.n	8006832 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da0b      	bge.n	80067ce <USBD_StdEPReq+0x2b2>
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	3310      	adds	r3, #16
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	3304      	adds	r3, #4
 80067cc:	e00b      	b.n	80067e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	3304      	adds	r3, #4
 80067e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <USBD_StdEPReq+0x2d8>
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b80      	cmp	r3, #128	@ 0x80
 80067f2:	d103      	bne.n	80067fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e00e      	b.n	800681a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f8a3 	bl	800794c <USBD_LL_IsStallEP>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e002      	b.n	800681a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2202      	movs	r2, #2
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fbdd 	bl	8006fe0 <USBD_CtlSendData>
              break;
 8006826:	e004      	b.n	8006832 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fb5b 	bl	8006ee6 <USBD_CtlError>
              break;
 8006830:	bf00      	nop
          }
          break;
 8006832:	e004      	b.n	800683e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fb55 	bl	8006ee6 <USBD_CtlError>
          break;
 800683c:	bf00      	nop
      }
      break;
 800683e:	e005      	b.n	800684c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fb4f 	bl	8006ee6 <USBD_CtlError>
      break;
 8006848:	e000      	b.n	800684c <USBD_StdEPReq+0x330>
      break;
 800684a:	bf00      	nop
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	885b      	ldrh	r3, [r3, #2]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	2b06      	cmp	r3, #6
 800687a:	f200 8128 	bhi.w	8006ace <USBD_GetDescriptor+0x276>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <USBD_GetDescriptor+0x2c>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068a1 	.word	0x080068a1
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068f9 	.word	0x080068f9
 8006890:	08006acf 	.word	0x08006acf
 8006894:	08006acf 	.word	0x08006acf
 8006898:	08006a6f 	.word	0x08006a6f
 800689c:	08006a9b 	.word	0x08006a9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	7c12      	ldrb	r2, [r2, #16]
 80068ac:	f107 0108 	add.w	r1, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
      break;
 80068b6:	e112      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7c1b      	ldrb	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c8:	f107 0208 	add.w	r2, r7, #8
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	2202      	movs	r2, #2
 80068d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068da:	e100      	b.n	8006ade <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
      break;
 80068f6:	e0f2      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	885b      	ldrh	r3, [r3, #2]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b05      	cmp	r3, #5
 8006900:	f200 80ac 	bhi.w	8006a5c <USBD_GetDescriptor+0x204>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <USBD_GetDescriptor+0xb4>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006925 	.word	0x08006925
 8006910:	08006959 	.word	0x08006959
 8006914:	0800698d 	.word	0x0800698d
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069f5 	.word	0x080069f5
 8006920:	08006a29 	.word	0x08006a29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006946:	e091      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 facb 	bl	8006ee6 <USBD_CtlError>
            err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
          break;
 8006956:	e089      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e077      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fab1 	bl	8006ee6 <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e06f      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e05d      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa97 	bl	8006ee6 <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e055      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e043      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa7d 	bl	8006ee6 <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e03b      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e029      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa63 	bl	8006ee6 <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e021      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 0108 	add.w	r1, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4a:	e00f      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa49 	bl	8006ee6 <USBD_CtlError>
            err++;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	3301      	adds	r3, #1
 8006a58:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5a:	e007      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa41 	bl	8006ee6 <USBD_CtlError>
          err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a6a:	bf00      	nop
      }
      break;
 8006a6c:	e037      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7c1b      	ldrb	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7e:	f107 0208 	add.w	r2, r7, #8
 8006a82:	4610      	mov	r0, r2
 8006a84:	4798      	blx	r3
 8006a86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a88:	e029      	b.n	8006ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa2a 	bl	8006ee6 <USBD_CtlError>
        err++;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	3301      	adds	r3, #1
 8006a96:	72fb      	strb	r3, [r7, #11]
      break;
 8006a98:	e021      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7c1b      	ldrb	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10d      	bne.n	8006abe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aaa:	f107 0208 	add.w	r2, r7, #8
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4798      	blx	r3
 8006ab2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	2207      	movs	r2, #7
 8006aba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006abc:	e00f      	b.n	8006ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fa10 	bl	8006ee6 <USBD_CtlError>
        err++;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	72fb      	strb	r3, [r7, #11]
      break;
 8006acc:	e007      	b.n	8006ade <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa08 	bl	8006ee6 <USBD_CtlError>
      err++;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	72fb      	strb	r3, [r7, #11]
      break;
 8006adc:	bf00      	nop
  }

  if (err != 0U)
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11e      	bne.n	8006b22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	88db      	ldrh	r3, [r3, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d016      	beq.n	8006b1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006aec:	893b      	ldrh	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	88da      	ldrh	r2, [r3, #6]
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bf28      	it	cs
 8006afc:	4613      	movcs	r3, r2
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b02:	893b      	ldrh	r3, [r7, #8]
 8006b04:	461a      	mov	r2, r3
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa69 	bl	8006fe0 <USBD_CtlSendData>
 8006b0e:	e009      	b.n	8006b24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9e7 	bl	8006ee6 <USBD_CtlError>
 8006b18:	e004      	b.n	8006b24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 faba 	bl	8007094 <USBD_CtlSendStatus>
 8006b20:	e000      	b.n	8006b24 <USBD_GetDescriptor+0x2cc>
    return;
 8006b22:	bf00      	nop
  }
}
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	889b      	ldrh	r3, [r3, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d131      	bne.n	8006ba2 <USBD_SetAddress+0x76>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d12d      	bne.n	8006ba2 <USBD_SetAddress+0x76>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b4c:	d829      	bhi.n	8006ba2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d104      	bne.n	8006b70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9bc 	bl	8006ee6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6e:	e01d      	b.n	8006bac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7bfa      	ldrb	r2, [r7, #15]
 8006b74:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 ff11 	bl	80079a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa86 	bl	8007094 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b96:	e009      	b.n	8006bac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	e004      	b.n	8006bac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f99e 	bl	8006ee6 <USBD_CtlError>
  }
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d905      	bls.n	8006be0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f985 	bl	8006ee6 <USBD_CtlError>
    return USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e08c      	b.n	8006cfa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d002      	beq.n	8006bf2 <USBD_SetConfig+0x3e>
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d029      	beq.n	8006c44 <USBD_SetConfig+0x90>
 8006bf0:	e075      	b.n	8006cde <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bf2:	4b44      	ldr	r3, [pc, #272]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d020      	beq.n	8006c3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006bfa:	4b42      	ldr	r3, [pc, #264]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c04:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fe ffe3 	bl	8005bd6 <USBD_SetClassConfig>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f962 	bl	8006ee6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2202      	movs	r2, #2
 8006c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c2a:	e065      	b.n	8006cf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fa31 	bl	8007094 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2203      	movs	r2, #3
 8006c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c3a:	e05d      	b.n	8006cf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa29 	bl	8007094 <USBD_CtlSendStatus>
      break;
 8006c42:	e059      	b.n	8006cf8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c44:	4b2f      	ldr	r3, [pc, #188]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d112      	bne.n	8006c72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006c54:	4b2b      	ldr	r3, [pc, #172]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5e:	4b29      	ldr	r3, [pc, #164]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fe ffd2 	bl	8005c0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa12 	bl	8007094 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c70:	e042      	b.n	8006cf8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c72:	4b24      	ldr	r3, [pc, #144]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d02a      	beq.n	8006cd6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fe ffc0 	bl	8005c0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c98:	4b1a      	ldr	r3, [pc, #104]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fe ff99 	bl	8005bd6 <USBD_SetClassConfig>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00f      	beq.n	8006cce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f918 	bl	8006ee6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe ffa5 	bl	8005c0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006ccc:	e014      	b.n	8006cf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9e0 	bl	8007094 <USBD_CtlSendStatus>
      break;
 8006cd4:	e010      	b.n	8006cf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9dc 	bl	8007094 <USBD_CtlSendStatus>
      break;
 8006cdc:	e00c      	b.n	8006cf8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f900 	bl	8006ee6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ce6:	4b07      	ldr	r3, [pc, #28]	@ (8006d04 <USBD_SetConfig+0x150>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fe ff8e 	bl	8005c0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf6:	bf00      	nop
  }

  return ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200001d8 	.word	0x200001d8

08006d08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	88db      	ldrh	r3, [r3, #6]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d004      	beq.n	8006d24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f8e2 	bl	8006ee6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d22:	e023      	b.n	8006d6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	dc02      	bgt.n	8006d36 <USBD_GetConfig+0x2e>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dc03      	bgt.n	8006d3c <USBD_GetConfig+0x34>
 8006d34:	e015      	b.n	8006d62 <USBD_GetConfig+0x5a>
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d00b      	beq.n	8006d52 <USBD_GetConfig+0x4a>
 8006d3a:	e012      	b.n	8006d62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3308      	adds	r3, #8
 8006d46:	2201      	movs	r2, #1
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f948 	bl	8006fe0 <USBD_CtlSendData>
        break;
 8006d50:	e00c      	b.n	8006d6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3304      	adds	r3, #4
 8006d56:	2201      	movs	r2, #1
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f940 	bl	8006fe0 <USBD_CtlSendData>
        break;
 8006d60:	e004      	b.n	8006d6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8be 	bl	8006ee6 <USBD_CtlError>
        break;
 8006d6a:	bf00      	nop
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d81e      	bhi.n	8006dca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	88db      	ldrh	r3, [r3, #6]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d004      	beq.n	8006d9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f8a5 	bl	8006ee6 <USBD_CtlError>
        break;
 8006d9c:	e01a      	b.n	8006dd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f043 0202 	orr.w	r2, r3, #2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f90c 	bl	8006fe0 <USBD_CtlSendData>
      break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f88a 	bl	8006ee6 <USBD_CtlError>
      break;
 8006dd2:	bf00      	nop
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	885b      	ldrh	r3, [r3, #2]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d107      	bne.n	8006dfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f94c 	bl	8007094 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006dfc:	e013      	b.n	8006e26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	885b      	ldrh	r3, [r3, #2]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d10b      	bne.n	8006e1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	889b      	ldrh	r3, [r3, #4]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f93c 	bl	8007094 <USBD_CtlSendStatus>
}
 8006e1c:	e003      	b.n	8006e26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f860 	bl	8006ee6 <USBD_CtlError>
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d80b      	bhi.n	8006e5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	885b      	ldrh	r3, [r3, #2]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d10c      	bne.n	8006e68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f91c 	bl	8007094 <USBD_CtlSendStatus>
      }
      break;
 8006e5c:	e004      	b.n	8006e68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f840 	bl	8006ee6 <USBD_CtlError>
      break;
 8006e66:	e000      	b.n	8006e6a <USBD_ClrFeature+0x3c>
      break;
 8006e68:	bf00      	nop
  }
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	781a      	ldrb	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fa40 	bl	8006322 <SWAPBYTE>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fa33 	bl	8006322 <SWAPBYTE>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fa26 	bl	8006322 <SWAPBYTE>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	80da      	strh	r2, [r3, #6]
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef0:	2180      	movs	r1, #128	@ 0x80
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fcec 	bl	80078d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ef8:	2100      	movs	r1, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fce8 	bl	80078d0 <USBD_LL_StallEP>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d042      	beq.n	8006fa4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f22:	6938      	ldr	r0, [r7, #16]
 8006f24:	f000 f842 	bl	8006fac <USBD_GetLen>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f32:	d808      	bhi.n	8006f46 <USBD_GetString+0x3e>
 8006f34:	6938      	ldr	r0, [r7, #16]
 8006f36:	f000 f839 	bl	8006fac <USBD_GetLen>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	e001      	b.n	8006f4a <USBD_GetString+0x42>
 8006f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	4413      	add	r3, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4413      	add	r3, r2
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f70:	e013      	b.n	8006f9a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4413      	add	r3, r2
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	7812      	ldrb	r2, [r2, #0]
 8006f7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3301      	adds	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
    idx++;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	3301      	adds	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	4413      	add	r3, r2
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	3301      	adds	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e7      	bne.n	8006f72 <USBD_GetString+0x6a>
 8006fa2:	e000      	b.n	8006fa6 <USBD_GetString+0x9e>
    return;
 8006fa4:	bf00      	nop
  }
}
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006fbc:	e005      	b.n	8006fca <USBD_GetLen+0x1e>
  {
    len++;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f5      	bne.n	8006fbe <USBD_GetLen+0x12>
  }

  return len;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	2100      	movs	r1, #0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fceb 	bl	80079e2 <USBD_LL_Transmit>

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	2100      	movs	r1, #0
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fcda 	bl	80079e2 <USBD_LL_Transmit>

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2203      	movs	r2, #3
 8007048:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fcde 	bl	8007a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	2100      	movs	r1, #0
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fccd 	bl	8007a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2204      	movs	r2, #4
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070a4:	2300      	movs	r3, #0
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fc99 	bl	80079e2 <USBD_LL_Transmit>

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2205      	movs	r2, #5
 80070c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ca:	2300      	movs	r3, #0
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fca7 	bl	8007a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070e4:	2200      	movs	r2, #0
 80070e6:	4912      	ldr	r1, [pc, #72]	@ (8007130 <MX_USB_DEVICE_Init+0x50>)
 80070e8:	4812      	ldr	r0, [pc, #72]	@ (8007134 <MX_USB_DEVICE_Init+0x54>)
 80070ea:	f7fe fcf7 	bl	8005adc <USBD_Init>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070f4:	f7f9 fb9c 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070f8:	490f      	ldr	r1, [pc, #60]	@ (8007138 <MX_USB_DEVICE_Init+0x58>)
 80070fa:	480e      	ldr	r0, [pc, #56]	@ (8007134 <MX_USB_DEVICE_Init+0x54>)
 80070fc:	f7fe fd1e 	bl	8005b3c <USBD_RegisterClass>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007106:	f7f9 fb93 	bl	8000830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800710a:	490c      	ldr	r1, [pc, #48]	@ (800713c <MX_USB_DEVICE_Init+0x5c>)
 800710c:	4809      	ldr	r0, [pc, #36]	@ (8007134 <MX_USB_DEVICE_Init+0x54>)
 800710e:	f7fe fc15 	bl	800593c <USBD_CDC_RegisterInterface>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007118:	f7f9 fb8a 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800711c:	4805      	ldr	r0, [pc, #20]	@ (8007134 <MX_USB_DEVICE_Init+0x54>)
 800711e:	f7fe fd43 	bl	8005ba8 <USBD_Start>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007128:	f7f9 fb82 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800712c:	bf00      	nop
 800712e:	bd80      	pop	{r7, pc}
 8007130:	200000ac 	.word	0x200000ac
 8007134:	200001dc 	.word	0x200001dc
 8007138:	20000018 	.word	0x20000018
 800713c:	20000098 	.word	0x20000098

08007140 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007144:	2200      	movs	r2, #0
 8007146:	4905      	ldr	r1, [pc, #20]	@ (800715c <CDC_Init_FS+0x1c>)
 8007148:	4805      	ldr	r0, [pc, #20]	@ (8007160 <CDC_Init_FS+0x20>)
 800714a:	f7fe fc11 	bl	8005970 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800714e:	4905      	ldr	r1, [pc, #20]	@ (8007164 <CDC_Init_FS+0x24>)
 8007150:	4803      	ldr	r0, [pc, #12]	@ (8007160 <CDC_Init_FS+0x20>)
 8007152:	f7fe fc2f 	bl	80059b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007156:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007158:	4618      	mov	r0, r3
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000cb8 	.word	0x20000cb8
 8007160:	200001dc 	.word	0x200001dc
 8007164:	200004b8 	.word	0x200004b8

08007168 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800716c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800716e:	4618      	mov	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
 8007184:	4613      	mov	r3, r2
 8007186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	2b23      	cmp	r3, #35	@ 0x23
 800718c:	d84a      	bhi.n	8007224 <CDC_Control_FS+0xac>
 800718e:	a201      	add	r2, pc, #4	@ (adr r2, 8007194 <CDC_Control_FS+0x1c>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	08007225 	.word	0x08007225
 8007198:	08007225 	.word	0x08007225
 800719c:	08007225 	.word	0x08007225
 80071a0:	08007225 	.word	0x08007225
 80071a4:	08007225 	.word	0x08007225
 80071a8:	08007225 	.word	0x08007225
 80071ac:	08007225 	.word	0x08007225
 80071b0:	08007225 	.word	0x08007225
 80071b4:	08007225 	.word	0x08007225
 80071b8:	08007225 	.word	0x08007225
 80071bc:	08007225 	.word	0x08007225
 80071c0:	08007225 	.word	0x08007225
 80071c4:	08007225 	.word	0x08007225
 80071c8:	08007225 	.word	0x08007225
 80071cc:	08007225 	.word	0x08007225
 80071d0:	08007225 	.word	0x08007225
 80071d4:	08007225 	.word	0x08007225
 80071d8:	08007225 	.word	0x08007225
 80071dc:	08007225 	.word	0x08007225
 80071e0:	08007225 	.word	0x08007225
 80071e4:	08007225 	.word	0x08007225
 80071e8:	08007225 	.word	0x08007225
 80071ec:	08007225 	.word	0x08007225
 80071f0:	08007225 	.word	0x08007225
 80071f4:	08007225 	.word	0x08007225
 80071f8:	08007225 	.word	0x08007225
 80071fc:	08007225 	.word	0x08007225
 8007200:	08007225 	.word	0x08007225
 8007204:	08007225 	.word	0x08007225
 8007208:	08007225 	.word	0x08007225
 800720c:	08007225 	.word	0x08007225
 8007210:	08007225 	.word	0x08007225
 8007214:	08007225 	.word	0x08007225
 8007218:	08007225 	.word	0x08007225
 800721c:	08007225 	.word	0x08007225
 8007220:	08007225 	.word	0x08007225
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007224:	bf00      	nop
  }

  return (USBD_OK);
 8007226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4805      	ldr	r0, [pc, #20]	@ (8007258 <CDC_Receive_FS+0x24>)
 8007242:	f7fe fbb7 	bl	80059b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007246:	4804      	ldr	r0, [pc, #16]	@ (8007258 <CDC_Receive_FS+0x24>)
 8007248:	f7fe fc12 	bl	8005a70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800724c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	200001dc 	.word	0x200001dc

0800725c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800726c:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <CDC_Transmit_FS+0x48>)
 800726e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007272:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800727e:	2301      	movs	r3, #1
 8007280:	e00b      	b.n	800729a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007282:	887b      	ldrh	r3, [r7, #2]
 8007284:	461a      	mov	r2, r3
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4806      	ldr	r0, [pc, #24]	@ (80072a4 <CDC_Transmit_FS+0x48>)
 800728a:	f7fe fb71 	bl	8005970 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800728e:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <CDC_Transmit_FS+0x48>)
 8007290:	f7fe fbae 	bl	80059f0 <USBD_CDC_TransmitPacket>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	200001dc 	.word	0x200001dc

080072a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80072ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2212      	movs	r2, #18
 80072dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072de:	4b03      	ldr	r3, [pc, #12]	@ (80072ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	200000c8 	.word	0x200000c8

080072f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2204      	movs	r2, #4
 8007300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007302:	4b03      	ldr	r3, [pc, #12]	@ (8007310 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	200000dc 	.word	0x200000dc

08007314 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	4907      	ldr	r1, [pc, #28]	@ (8007348 <USBD_FS_ProductStrDescriptor+0x34>)
 800732a:	4808      	ldr	r0, [pc, #32]	@ (800734c <USBD_FS_ProductStrDescriptor+0x38>)
 800732c:	f7ff fdec 	bl	8006f08 <USBD_GetString>
 8007330:	e004      	b.n	800733c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	4904      	ldr	r1, [pc, #16]	@ (8007348 <USBD_FS_ProductStrDescriptor+0x34>)
 8007336:	4805      	ldr	r0, [pc, #20]	@ (800734c <USBD_FS_ProductStrDescriptor+0x38>)
 8007338:	f7ff fde6 	bl	8006f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800733c:	4b02      	ldr	r3, [pc, #8]	@ (8007348 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	200014b8 	.word	0x200014b8
 800734c:	08007c7c 	.word	0x08007c7c

08007350 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	4904      	ldr	r1, [pc, #16]	@ (8007370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007360:	4804      	ldr	r0, [pc, #16]	@ (8007374 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007362:	f7ff fdd1 	bl	8006f08 <USBD_GetString>
  return USBD_StrDesc;
 8007366:	4b02      	ldr	r3, [pc, #8]	@ (8007370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	200014b8 	.word	0x200014b8
 8007374:	08007c7c 	.word	0x08007c7c

08007378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	221a      	movs	r2, #26
 8007388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800738a:	f000 f843 	bl	8007414 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800738e:	4b02      	ldr	r3, [pc, #8]	@ (8007398 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	200000e0 	.word	0x200000e0

0800739c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	6039      	str	r1, [r7, #0]
 80073a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4907      	ldr	r1, [pc, #28]	@ (80073d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073b2:	4808      	ldr	r0, [pc, #32]	@ (80073d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073b4:	f7ff fda8 	bl	8006f08 <USBD_GetString>
 80073b8:	e004      	b.n	80073c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	4904      	ldr	r1, [pc, #16]	@ (80073d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073be:	4805      	ldr	r0, [pc, #20]	@ (80073d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073c0:	f7ff fda2 	bl	8006f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073c4:	4b02      	ldr	r3, [pc, #8]	@ (80073d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200014b8 	.word	0x200014b8
 80073d4:	08007c8c 	.word	0x08007c8c

080073d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4907      	ldr	r1, [pc, #28]	@ (800740c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ee:	4808      	ldr	r0, [pc, #32]	@ (8007410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073f0:	f7ff fd8a 	bl	8006f08 <USBD_GetString>
 80073f4:	e004      	b.n	8007400 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4904      	ldr	r1, [pc, #16]	@ (800740c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073fa:	4805      	ldr	r0, [pc, #20]	@ (8007410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073fc:	f7ff fd84 	bl	8006f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007400:	4b02      	ldr	r3, [pc, #8]	@ (800740c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	200014b8 	.word	0x200014b8
 8007410:	08007c98 	.word	0x08007c98

08007414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800741a:	4b0f      	ldr	r3, [pc, #60]	@ (8007458 <Get_SerialNum+0x44>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007420:	4b0e      	ldr	r3, [pc, #56]	@ (800745c <Get_SerialNum+0x48>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007426:	4b0e      	ldr	r3, [pc, #56]	@ (8007460 <Get_SerialNum+0x4c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800743a:	2208      	movs	r2, #8
 800743c:	4909      	ldr	r1, [pc, #36]	@ (8007464 <Get_SerialNum+0x50>)
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f814 	bl	800746c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007444:	2204      	movs	r2, #4
 8007446:	4908      	ldr	r1, [pc, #32]	@ (8007468 <Get_SerialNum+0x54>)
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	f000 f80f 	bl	800746c <IntToUnicode>
  }
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	1fff7a10 	.word	0x1fff7a10
 800745c:	1fff7a14 	.word	0x1fff7a14
 8007460:	1fff7a18 	.word	0x1fff7a18
 8007464:	200000e2 	.word	0x200000e2
 8007468:	200000f2 	.word	0x200000f2

0800746c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
 8007482:	e027      	b.n	80074d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0f1b      	lsrs	r3, r3, #28
 8007488:	2b09      	cmp	r3, #9
 800748a:	d80b      	bhi.n	80074a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	0f1b      	lsrs	r3, r3, #28
 8007490:	b2da      	uxtb	r2, r3
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4619      	mov	r1, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	440b      	add	r3, r1
 800749c:	3230      	adds	r2, #48	@ 0x30
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e00a      	b.n	80074ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	0f1b      	lsrs	r3, r3, #28
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4619      	mov	r1, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	440b      	add	r3, r1
 80074b4:	3237      	adds	r2, #55	@ 0x37
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	3301      	adds	r3, #1
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	3301      	adds	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
 80074d4:	7dfa      	ldrb	r2, [r7, #23]
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d3d3      	bcc.n	8007484 <IntToUnicode+0x18>
  }
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
	...

080074ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	@ 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800750c:	d13a      	bne.n	8007584 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	4b1e      	ldr	r3, [pc, #120]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	4a1d      	ldr	r2, [pc, #116]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6313      	str	r3, [r2, #48]	@ 0x30
 800751e:	4b1b      	ldr	r3, [pc, #108]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800752a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800752e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007530:	2302      	movs	r3, #2
 8007532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007538:	2303      	movs	r3, #3
 800753a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800753c:	230a      	movs	r3, #10
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	4619      	mov	r1, r3
 8007546:	4812      	ldr	r0, [pc, #72]	@ (8007590 <HAL_PCD_MspInit+0xa4>)
 8007548:	f7fa fa92 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800754c:	4b0f      	ldr	r3, [pc, #60]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 800754e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007550:	4a0e      	ldr	r2, [pc, #56]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 8007552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007556:	6353      	str	r3, [r2, #52]	@ 0x34
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 800755e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007560:	4a0a      	ldr	r2, [pc, #40]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 8007562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007566:	6453      	str	r3, [r2, #68]	@ 0x44
 8007568:	4b08      	ldr	r3, [pc, #32]	@ (800758c <HAL_PCD_MspInit+0xa0>)
 800756a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	2043      	movs	r0, #67	@ 0x43
 800757a:	f7fa fa42 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800757e:	2043      	movs	r0, #67	@ 0x43
 8007580:	f7fa fa5b 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007584:	bf00      	nop
 8007586:	3728      	adds	r7, #40	@ 0x28
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40023800 	.word	0x40023800
 8007590:	40020000 	.word	0x40020000

08007594 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f7fe fb49 	bl	8005c42 <USBD_LL_SetupStage>
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80075ca:	78fa      	ldrb	r2, [r7, #3]
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	4619      	mov	r1, r3
 80075e2:	f7fe fb83 	bl	8005cec <USBD_LL_DataOutStage>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	3320      	adds	r3, #32
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	4619      	mov	r1, r3
 8007616:	f7fe fc1c 	bl	8005e52 <USBD_LL_DataInStage>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fd56 	bl	80060e2 <USBD_LL_SOF>
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	79db      	ldrb	r3, [r3, #7]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	e008      	b.n	800766a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	79db      	ldrb	r3, [r3, #7]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d102      	bne.n	8007666 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	e001      	b.n	800766a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007666:	f7f9 f8e3 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007670:	7bfa      	ldrb	r2, [r7, #15]
 8007672:	4611      	mov	r1, r2
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fcf0 	bl	800605a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fc98 	bl	8005fb6 <USBD_LL_Reset>
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fceb 	bl	800607a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7adb      	ldrb	r3, [r3, #11]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076c4:	4b04      	ldr	r3, [pc, #16]	@ (80076d8 <HAL_PCD_SuspendCallback+0x48>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	4a03      	ldr	r2, [pc, #12]	@ (80076d8 <HAL_PCD_SuspendCallback+0x48>)
 80076ca:	f043 0306 	orr.w	r3, r3, #6
 80076ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed00 	.word	0xe000ed00

080076dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fce1 	bl	80060b2 <USBD_LL_Resume>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	4611      	mov	r1, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fd39 	bl	8006186 <USBD_LL_IsoOUTIncomplete>
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fcf5 	bl	8006122 <USBD_LL_IsoINIncomplete>
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fd4b 	bl	80061ea <USBD_LL_DevConnected>
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fd48 	bl	8006200 <USBD_LL_DevDisconnected>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d13c      	bne.n	8007802 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007788:	4a20      	ldr	r2, [pc, #128]	@ (800780c <USBD_LL_Init+0x94>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1e      	ldr	r2, [pc, #120]	@ (800780c <USBD_LL_Init+0x94>)
 8007794:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007798:	4b1c      	ldr	r3, [pc, #112]	@ (800780c <USBD_LL_Init+0x94>)
 800779a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800779e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80077a0:	4b1a      	ldr	r3, [pc, #104]	@ (800780c <USBD_LL_Init+0x94>)
 80077a2:	2204      	movs	r2, #4
 80077a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077a6:	4b19      	ldr	r3, [pc, #100]	@ (800780c <USBD_LL_Init+0x94>)
 80077a8:	2202      	movs	r2, #2
 80077aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077ac:	4b17      	ldr	r3, [pc, #92]	@ (800780c <USBD_LL_Init+0x94>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077b2:	4b16      	ldr	r3, [pc, #88]	@ (800780c <USBD_LL_Init+0x94>)
 80077b4:	2202      	movs	r2, #2
 80077b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077b8:	4b14      	ldr	r3, [pc, #80]	@ (800780c <USBD_LL_Init+0x94>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077be:	4b13      	ldr	r3, [pc, #76]	@ (800780c <USBD_LL_Init+0x94>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077c4:	4b11      	ldr	r3, [pc, #68]	@ (800780c <USBD_LL_Init+0x94>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077ca:	4b10      	ldr	r3, [pc, #64]	@ (800780c <USBD_LL_Init+0x94>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077d0:	4b0e      	ldr	r3, [pc, #56]	@ (800780c <USBD_LL_Init+0x94>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077d6:	480d      	ldr	r0, [pc, #52]	@ (800780c <USBD_LL_Init+0x94>)
 80077d8:	f7fa fae6 	bl	8001da8 <HAL_PCD_Init>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077e2:	f7f9 f825 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077e6:	2180      	movs	r1, #128	@ 0x80
 80077e8:	4808      	ldr	r0, [pc, #32]	@ (800780c <USBD_LL_Init+0x94>)
 80077ea:	f7fb fd12 	bl	8003212 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077ee:	2240      	movs	r2, #64	@ 0x40
 80077f0:	2100      	movs	r1, #0
 80077f2:	4806      	ldr	r0, [pc, #24]	@ (800780c <USBD_LL_Init+0x94>)
 80077f4:	f7fb fcc6 	bl	8003184 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077f8:	2280      	movs	r2, #128	@ 0x80
 80077fa:	2101      	movs	r1, #1
 80077fc:	4803      	ldr	r0, [pc, #12]	@ (800780c <USBD_LL_Init+0x94>)
 80077fe:	f7fb fcc1 	bl	8003184 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	200016b8 	.word	0x200016b8

08007810 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fbcd 	bl	8001fc6 <HAL_PCD_Start>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f942 	bl	8007abc <USBD_Get_USB_Status>
 8007838:	4603      	mov	r3, r0
 800783a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800783c:	7bbb      	ldrb	r3, [r7, #14]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	4603      	mov	r3, r0
 8007856:	70fb      	strb	r3, [r7, #3]
 8007858:	460b      	mov	r3, r1
 800785a:	70bb      	strb	r3, [r7, #2]
 800785c:	4613      	mov	r3, r2
 800785e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800786e:	78bb      	ldrb	r3, [r7, #2]
 8007870:	883a      	ldrh	r2, [r7, #0]
 8007872:	78f9      	ldrb	r1, [r7, #3]
 8007874:	f7fb f8a1 	bl	80029ba <HAL_PCD_EP_Open>
 8007878:	4603      	mov	r3, r0
 800787a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f91c 	bl	8007abc <USBD_Get_USB_Status>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007888:	7bbb      	ldrb	r3, [r7, #14]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fb f8ec 	bl	8002a8e <HAL_PCD_EP_Close>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f8fd 	bl	8007abc <USBD_Get_USB_Status>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fb f9a4 	bl	8002c3c <HAL_PCD_EP_SetStall>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f8de 	bl	8007abc <USBD_Get_USB_Status>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007904:	7bbb      	ldrb	r3, [r7, #14]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f7fb f9e8 	bl	8002d02 <HAL_PCD_EP_ClrStall>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f8bf 	bl	8007abc <USBD_Get_USB_Status>
 800793e:	4603      	mov	r3, r0
 8007940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007942:	7bbb      	ldrb	r3, [r7, #14]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800795e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0b      	bge.n	8007980 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	3316      	adds	r3, #22
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	e00b      	b.n	8007998 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	4613      	mov	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007996:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fa ffd5 	bl	8002972 <HAL_PCD_SetAddress>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f874 	bl	8007abc <USBD_Get_USB_Status>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	460b      	mov	r3, r1
 80079f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007a00:	7af9      	ldrb	r1, [r7, #11]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	f7fb f8df 	bl	8002bc8 <HAL_PCD_EP_Transmit>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f853 	bl	8007abc <USBD_Get_USB_Status>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	460b      	mov	r3, r1
 8007a32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007a42:	7af9      	ldrb	r1, [r7, #11]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	f7fb f86b 	bl	8002b22 <HAL_PCD_EP_Receive>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f832 	bl	8007abc <USBD_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fb f88b 	bl	8002b98 <HAL_PCD_EP_GetRxCount>
 8007a82:	4603      	mov	r3, r0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a94:	4b03      	ldr	r3, [pc, #12]	@ (8007aa4 <USBD_static_malloc+0x18>)
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20001b9c 	.word	0x20001b9c

08007aa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d817      	bhi.n	8007b00 <USBD_Get_USB_Status+0x44>
 8007ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad8 <USBD_Get_USB_Status+0x1c>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007aef 	.word	0x08007aef
 8007ae0:	08007af5 	.word	0x08007af5
 8007ae4:	08007afb 	.word	0x08007afb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
    break;
 8007aec:	e00b      	b.n	8007b06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aee:	2303      	movs	r3, #3
 8007af0:	73fb      	strb	r3, [r7, #15]
    break;
 8007af2:	e008      	b.n	8007b06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
    break;
 8007af8:	e005      	b.n	8007b06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007afa:	2303      	movs	r3, #3
 8007afc:	73fb      	strb	r3, [r7, #15]
    break;
 8007afe:	e002      	b.n	8007b06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	73fb      	strb	r3, [r7, #15]
    break;
 8007b04:	bf00      	nop
  }
  return usb_status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <__itoa>:
 8007b14:	1e93      	subs	r3, r2, #2
 8007b16:	2b22      	cmp	r3, #34	@ 0x22
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	d904      	bls.n	8007b28 <__itoa+0x14>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	700b      	strb	r3, [r1, #0]
 8007b22:	461c      	mov	r4, r3
 8007b24:	4620      	mov	r0, r4
 8007b26:	bd10      	pop	{r4, pc}
 8007b28:	2a0a      	cmp	r2, #10
 8007b2a:	d109      	bne.n	8007b40 <__itoa+0x2c>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	da07      	bge.n	8007b40 <__itoa+0x2c>
 8007b30:	232d      	movs	r3, #45	@ 0x2d
 8007b32:	700b      	strb	r3, [r1, #0]
 8007b34:	4240      	negs	r0, r0
 8007b36:	2101      	movs	r1, #1
 8007b38:	4421      	add	r1, r4
 8007b3a:	f000 f805 	bl	8007b48 <__utoa>
 8007b3e:	e7f1      	b.n	8007b24 <__itoa+0x10>
 8007b40:	2100      	movs	r1, #0
 8007b42:	e7f9      	b.n	8007b38 <__itoa+0x24>

08007b44 <itoa>:
 8007b44:	f7ff bfe6 	b.w	8007b14 <__itoa>

08007b48 <__utoa>:
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	4c1f      	ldr	r4, [pc, #124]	@ (8007bc8 <__utoa+0x80>)
 8007b4c:	b08b      	sub	sp, #44	@ 0x2c
 8007b4e:	4605      	mov	r5, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	466e      	mov	r6, sp
 8007b54:	f104 0c20 	add.w	ip, r4, #32
 8007b58:	6820      	ldr	r0, [r4, #0]
 8007b5a:	6861      	ldr	r1, [r4, #4]
 8007b5c:	4637      	mov	r7, r6
 8007b5e:	c703      	stmia	r7!, {r0, r1}
 8007b60:	3408      	adds	r4, #8
 8007b62:	4564      	cmp	r4, ip
 8007b64:	463e      	mov	r6, r7
 8007b66:	d1f7      	bne.n	8007b58 <__utoa+0x10>
 8007b68:	7921      	ldrb	r1, [r4, #4]
 8007b6a:	7139      	strb	r1, [r7, #4]
 8007b6c:	1e91      	subs	r1, r2, #2
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	6038      	str	r0, [r7, #0]
 8007b72:	2922      	cmp	r1, #34	@ 0x22
 8007b74:	f04f 0100 	mov.w	r1, #0
 8007b78:	d904      	bls.n	8007b84 <__utoa+0x3c>
 8007b7a:	7019      	strb	r1, [r3, #0]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4618      	mov	r0, r3
 8007b80:	b00b      	add	sp, #44	@ 0x2c
 8007b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b84:	1e58      	subs	r0, r3, #1
 8007b86:	4684      	mov	ip, r0
 8007b88:	fbb5 f7f2 	udiv	r7, r5, r2
 8007b8c:	fb02 5617 	mls	r6, r2, r7, r5
 8007b90:	3628      	adds	r6, #40	@ 0x28
 8007b92:	446e      	add	r6, sp
 8007b94:	460c      	mov	r4, r1
 8007b96:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007b9a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007b9e:	462e      	mov	r6, r5
 8007ba0:	42b2      	cmp	r2, r6
 8007ba2:	f101 0101 	add.w	r1, r1, #1
 8007ba6:	463d      	mov	r5, r7
 8007ba8:	d9ee      	bls.n	8007b88 <__utoa+0x40>
 8007baa:	2200      	movs	r2, #0
 8007bac:	545a      	strb	r2, [r3, r1]
 8007bae:	1919      	adds	r1, r3, r4
 8007bb0:	1aa5      	subs	r5, r4, r2
 8007bb2:	42aa      	cmp	r2, r5
 8007bb4:	dae3      	bge.n	8007b7e <__utoa+0x36>
 8007bb6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007bba:	780e      	ldrb	r6, [r1, #0]
 8007bbc:	7006      	strb	r6, [r0, #0]
 8007bbe:	3201      	adds	r2, #1
 8007bc0:	f801 5901 	strb.w	r5, [r1], #-1
 8007bc4:	e7f4      	b.n	8007bb0 <__utoa+0x68>
 8007bc6:	bf00      	nop
 8007bc8:	08007cb8 	.word	0x08007cb8

08007bcc <memset>:
 8007bcc:	4402      	add	r2, r0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d100      	bne.n	8007bd6 <memset+0xa>
 8007bd4:	4770      	bx	lr
 8007bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bda:	e7f9      	b.n	8007bd0 <memset+0x4>

08007bdc <strcat>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4602      	mov	r2, r0
 8007be0:	7814      	ldrb	r4, [r2, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	3201      	adds	r2, #1
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d1fa      	bne.n	8007be0 <strcat+0x4>
 8007bea:	3b01      	subs	r3, #1
 8007bec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d1f9      	bne.n	8007bec <strcat+0x10>
 8007bf8:	bd10      	pop	{r4, pc}
	...

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8007c34 <__libc_init_array+0x38>)
 8007c00:	4c0d      	ldr	r4, [pc, #52]	@ (8007c38 <__libc_init_array+0x3c>)
 8007c02:	1b64      	subs	r4, r4, r5
 8007c04:	10a4      	asrs	r4, r4, #2
 8007c06:	2600      	movs	r6, #0
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8007c3c <__libc_init_array+0x40>)
 8007c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8007c40 <__libc_init_array+0x44>)
 8007c10:	f000 f820 	bl	8007c54 <_init>
 8007c14:	1b64      	subs	r4, r4, r5
 8007c16:	10a4      	asrs	r4, r4, #2
 8007c18:	2600      	movs	r6, #0
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	08007ce8 	.word	0x08007ce8
 8007c38:	08007ce8 	.word	0x08007ce8
 8007c3c:	08007ce8 	.word	0x08007ce8
 8007c40:	08007cec 	.word	0x08007cec

08007c44 <strcpy>:
 8007c44:	4603      	mov	r3, r0
 8007c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c4a:	f803 2b01 	strb.w	r2, [r3], #1
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1f9      	bne.n	8007c46 <strcpy+0x2>
 8007c52:	4770      	bx	lr

08007c54 <_init>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr

08007c60 <_fini>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr
